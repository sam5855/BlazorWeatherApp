@page "/neweditor"

@* <div class="hover-content">
    <div id="toDoListContainer" style="height: 200px; overflow-y: scroll; border: 1px solid black;"></div>
</div> *@


<body class="container">
    <div id="myModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <select id="descriptionDropdownModal">
                <option value="">Select Description</option>
                <option value="Security 1">Description 1 - Passcode: Test</option>
                <option value="Security 2">Description 2 - Passcode: Phones</option>
                <option value="Security 3">Description 3 - Passcode: Example</option>
            </select>
            <input type="text" id="userCodeModal" placeholder="Enter Passcode" />
        </div>
    </div>
    
    <div class="sidebar">
        <div id="userValueDisplay"></div><button id="launchModalButton"
                                                 style="background: none; border: none; cursor: pointer;">
            ⚙️🕵️‍♂️
        </button>
        <button id="openOtherPageBtn" style="background: none; border: none; cursor: pointer; float: right;">
            HTML
            🔧
        </button>
        <hr class="thick">
        <div style="padding: 2px;">
            <input type="text" id="fileID" placeholder="Enter Transaction ID">
        </div>
        <hr class="thick">
        <input type="file" id="fileInput" multiple accept=".html, .pdf, .wftu" onchange="displayFileNames()" hidden>
        <input type="file" id="folderInput" directory webkitdirectory accept=".html, .pdf, .wftu"
               onchange="displayFileNamesFromFolder()" hidden>
        <div class="step">Files for Editing</div> <br>
        <div id="fileList"></div><br>
        <label for="printpreviewall">Preview all Edited Docs</label>
        <button id="printpreviewall" onclick="printPreviewAll()">Print Preview</button>
        <hr class="thick">
        <div class="collapsible">
            <button class="collapsible-button" data-value="1">Library</button>
            <div class="content" style="padding: 10px;">
                <br>
                <div id="checkboxList"
                     style="max-height: 250px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;">
                    <label>
                        <input type="checkbox" id="checkbox-1" onclick="validateCode(event, this)"
                               data-letter-id="letter1"
                               data-letter-content="Text for <span class='data-element' data-key='Name.1'>Jon</span>'s cookie recipe">
                        Add Cookies<span class="padlock" style="font-size: 13px; vertical-align: middle; float: left;"
                                         title="This content is lock.  Please enter passcode to enable.">🔒</span>
                        <button class="clone-btn" data-letter-id="letter1"
                                style="font-size: 11px; float: right;">
                            Clone
                        </button>
                    </label>
                    <hr>

                    <label>
                        <input type="checkbox" id="checkbox-2" data-letter-id="letter2"> Happy times
                        <button class="clone-btn" data-letter-id="letter2"
                                style="font-size: 11px; float: right;">
                            Clone
                        </button>
                    </label><br>
                    <label>
                        <input type="checkbox" id="checkbox-3" data-letter-id="letter3"> Transaction Details
                        <button class="clone-btn" data-letter-id="letter3"
                                style="font-size: 11px; float: right;">
                            Clone
                        </button>
                    </label><br>
                </div>
                <br>
                <label for="fileInput" style="font-size: 24px;">
                    ⇫
                    <input type="file" id="fileInput" multiple accept=".html, .pdf, .wftu" style="display: none;">
                </label>
            </div>
        </div>
        <hr>

        <div class="collapsible">
            <button class="collapsible-button" data-value="2" hidden>To Do List</button>
            <div class="content" style="padding: 10px;" hidden>
                <br>
                <div id="toDoListContainer" style="height: 200px; overflow-y: scroll; border: 1px solid black;" hidden>
                </div>
                <br>
            </div>
        </div>
        <hr hidden>
        <div class="collapsible">
            <button class="collapsible-button" data-value="2" hidden>Defaults</button>
            <div class="content" style="padding: 10px;" hidden>
                <div style="padding: 20px;" hidden>
                    <input type="text" id="defaultData" placeholder="Enter default text to be stored" hidden>
                    <button onclick="addToDropdowndefault()" hidden>Add to Dropdown</button>
                </div>

                <!-- Dropdown menu -->

            </div>
        </div>
        <hr hidden>
        <div class="collapsible">
            <button class="collapsible-button" data-value="2">Add Contact</button>
            <div class="content" style="padding: 10px;">
                <div style="padding: 20px;">
                    <div>
                        <select id="userDataDropdown" style="margin: 5px;">
                            <option>Select Entity</option>
                        </select><br>
                        <button onclick="insertSignatureLine5()"
                                style="font-size: 11px; width: 17%; text-align: center;"
                                title="Insert signature Line with date">
                            🖋 + date
                        </button>
                        <button onclick="insertSignatureLine()" style="font-size: 11px; width: 10%; text-align: center;"
                                title="Insert signature Line without date">
                            🖋
                        </button>
                        <button id="deleteEntityButton"
                                style="font-family: 'Cavolini', sans-serif; font-weight: bold; color: red; width: 10%; text-align: center;"
                                title="Remove contact from dropdown" data-value="1">
                            X
                        </button>
                        <button id="editContactButton" style="font-size: 11px; width: 10%; text-align: center;"
                                title="Edit contact">
                            ⚙️
                        </button>
                        <button onclick="insertEntityTextFromDropdown()"
                                style="font-size: 12px; width: 30%; text-align: center;"
                                title="Insert contact name and address">
                            Name & Address
                        </button>
                        <button id="insertNameBtn" style="font-size: 12px; width: 12%; text-align: center;"
                                title="Insert contact name">
                            Name
                        </button>
                        <br>
                        <hr>
                        <center>
                            <label>
                                <input type="radio" name="entityType" value="Individual" id="individualRadio">
                                Individual
                            </label>
                            <label style="margin-left: 20px;">
                                <input type="radio" name="entityType" value="NonIndividual" id="nonIndividualRadio">
                                NonIndividual
                            </label>
                        </center>
                    </div>
                    <hr>
                    <div id="formFields">
                        <input type="text" id="firstName" placeholder="First Name or Business Name">
                        <input type="text" id="middleName" placeholder="Middle Name">
                        <input type="text" id="lastName" placeholder="Last Name">
                        <input type="text" id="title" placeholder="Title"><br><br>
                        <select id="entityTypeStructure" data-value="0">
                            <option value="0">Select Entity Type</option>
                            <option value="1">Individual</option>
                            <option value="2">Sole Prop</option>
                            <option value="3">Partnership</option>
                            <option value="4">Limited Liability C Corporation</option>
                            <option value="5">Limited Liability S Corporation</option>
                            <option value="6">Limited Liability Partnership</option>
                            <option value="7">Corporation</option>
                            <option value="8">Trust</option>
                            <option value="9">Federal Entity</option>
                        </select> <br>
                        <button onclick="insertSignatureLine4()" style="font-size: 11px; float: right;"
                                title="Insert quick signature line and date without adding contact to rolodex">
                            🖋 +
                            date
                        </button>
                        <button onclick="insertSignatureLine2()" style="font-size: 11px; float: right;"
                                title="Insert quick signature line without adding contact to rolodex">
                            🖋
                        </button>
                        <button onclick="addToDropdown()" style="font-size: 11px; float: right;"
                                title="Add contact to rolodex">
                            💾
                        </button>
                        <br>


                        <hr>
                        <input type="text" id="streetAddress" placeholder="Street Address">
                        <input type="text" id="city" placeholder="City, State Zip"><br>
                        <input type="text" id="phone" placeholder="Phone">
                        <input type="text" id="email" placeholder="Email">
                        <hr hidden>
                    </div>

                    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;" hidden>
                        <label hidden>Borrower</label>
                        <label hidden>Guarantor</label>
                        <label hidden>Hypo</label>
                        <label hidden>Signer</label>
                    </div>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 20px;" hidden>
                        <input type="checkbox" id="checkboxBorrower" name="checkboxBorrower" hidden>
                        <input type="checkbox" id="checkboxGuarantor" name="checkboxGuarantor" hidden>
                        <input type="checkbox" id="checkboxHypothecator" name="checkboxHypothecator" hidden>
                        <input type="checkbox" id="checkboxSigner" name="checkboxSigner" hidden>
                    </div>
                </div>
            </div>
        </div>
        <hr>
        <div class="collapsible">
            <button class="collapsible-button" data-value="1">Merge File</button>
            <div class="content" style="padding: 10px;">
                <br>
                Default by Row<br> <input type="file" id="excelInput" accept=".xls, .xlsx" onchange="readExcel()">
                <button onclick="updateAllIframesWithNewData()">Merge</button> <br><br>
                Default by Column<br><input type="file" id="excelInput2" accept=".xls, .xlsx" onchange="readExcel2()">
                <button onclick="updateAllIframesWithNewData2()">Merge</button>
                <br>
            </div>
        </div>
        <hr>
        <div class="collapsible">
            <button class="collapsible-button" data-value="1">Predefined Defaults</button>
            <div class="content" style="padding: 10px;">

                <p><b>Please select your default language:</b></p>
                <select id="PredefinedDefaultsDropdown"></select>
                <button onclick="insertTextFromPredefinedDefaultsDropdown()">Insert</button>
                <br>
            </div>
        </div>
        <hr>

        <div class="collapsible">
            <button class="collapsible-button" data-value="2">Edit Existing Clauses</button>
            <div class="content" style="padding: 10px;">
                <br>
                <div id="checkboxContainer" style="height: 200px; overflow-y: scroll; border: 1px solid black;"></div>
                <br>
            </div>
        </div>
        <hr class="thick">
        <div class="collapsible">
            <button class="collapsible-button">Audit Log</button>
            <div class="content" style="padding: 10px;">
                <br>
                <div id="changeLog" style="height: 200px; overflow-y: scroll; border: 1px solid black;">
                    <ul id="changeList"></ul>
                </div>
            </div>
        </div>
    </div>
    <div class="topHeader">
        <div class="step">Editing Tools</div>
        <button class="hoverbutton" data-value="2" id="toDoListButton">To Do List</button>
        
        <button id="reviewContent" data-value="2">+ Review Tag</button>
        <button id="insertCheckboxBtn" data-value="2">+ Checkbox</button>
        <button id="insertCheckboxOptionsBtn" data-value="2">Insert Options</button>
        <button id="openInsertDropdown" data-value="2">Insert Dropdown</button>
        <button id="openHyperlinkPopup" data-value="2">+ Hyperlink</button>
        <button id="openInsertDataelement" data-value="2">+ Data Element</button>
        <button id="addLineButton" data-value="1">+ Line</button>
        <button id="indentContent" data-value="1">Indent</button>
        <button id="businessSignature" data-value="1">Business Signature Builder</button>
        <select id="userDataDropdowndefault" style="margin: 2px;">
            <option>Select Default</option>
        </select>
        <button onclick="insertDefaultTextFromDropdown()">+</button>
        <hr>
        <button id="boldButton" data-value="1">𝓑</button>
        <button id="underlineButton" data-value="1">𝓤</button>
        <button id="italicButton" data-value="1">𝓘</button>
        <button id="justifyLeftButton" data-value="1">Left</button>
        <button id="justifyRightButton" data-value="1">Right</button>
        <button id="centerTextButton" data-value="1">Center</button>
        <label for="fontSizeSelector"> ----- Font Size</label>
        <select id="fontSizeSelector" data-value="1">
            <option value="1">(8pt)</option>
            <option value="2">(10pt)</option>
            <option value="3">(12pt)</option>
            <option value="4">(14pt)</option>
            <option value="5">(18pt)</option>
            <option value="6">(24pt)</option>
            <option value="7">(36pt)</option>
        </select>-----Insert Table:<button id="insertTable1x1" data-value="1">1 x 1</button><button id="insertTable1x2"
                                                                                                    data-value="1">
            1 x 2
        </button><button id="insertTable1x3" data-value="1">1 x 3</button><button id="insertTable1x4" data-value="1">
            1 x 4
        </button><button id="insertTable1x5" data-value="1">
            1 x
            5
        </button><button id="insertTable1x6" data-value="1">1 x 6</button> Borders: <button id="borderLeft"
                                                                                            data-value="1">
            ⇤
        </button> <button id="borderRight" data-value="1">⇥</button> <button id="borderTop"
                                                                             data-value="1">
            ⤒
        </button> <button id="borderBottom" data-value="1">⤓</button> <button id="borderFull"
                                                                              data-value="1">
            Full
        </button><button id="removeBorder"
                         style="font-family: 'Cavolini', sans-serif; font-weight: bold; color: red;" data-value="1">
            X
        </button>
        <div id="goldenStar">&#9733;</div>
    </div>
    

    <div class="second-main">
        <!-- Parent Tabs Headers -->
        <div class="parent-tab-headers">
            <div class="parent-tab-header active" data-tab="1">Editable Files</div>
            <div class="parent-tab-header" data-tab="2">PDFs</div>
            <div class="parent-tab-header" data-tab="3"></div>
        </div>

        <!-- Parent Tab Contents -->
        <div class="parent-tab-content active" data-content="1">
            <div class="tabs">
                <div class="tab-headers" id="editableFormTabHeaders"></div>
                <div class="tab-content" id="editorsContainer"></div>
            </div>
        </div>

        <!-- Tab 2 Content -->
        <div class="parent-tab-content" data-content="2">
            <div class="tabs">
                <div class="tab-headers" id="pdfTabHeaders"></div>
                <div class="tab-content" id="pdfEditorsContainer"></div>
            </div>
        </div>

        <!-- Tab 3 Content -->
        <div class="parent-tab-content" data-content="3">
            Content for Tab 3 goes here.
        </div>
    </div>

    

    <iframe id="printFrame" style="display:none; border: none;"></iframe>

    <script>
                const MASTER_CODE = "MASTER123"; // Your master code

                let lastSuccessfulUserValue = null;

                document.addEventListener('DOMContentLoaded', () => {
                    const descriptionDetails = {
                        "Security 1": { "passcode": "Test", "value": 1 },
                        "Security 2": { "passcode": "Phones", "value": 2 },
                        "Security 3": { "passcode": "Example", "value": 3 }
                    };

                    document.getElementById('launchModalButton').addEventListener('click', function () {
                        document.getElementById('myModal').style.display = "block";

                        // Clear the passcode input each time the modal is opened
                        document.getElementById('userCodeModal').value = "";
                    });


                    function closeModal() {
                        document.getElementById('myModal').style.display = "none";
                    }

                    function validateUserCodeModal() {
                        const selectedDescription = document.getElementById('descriptionDropdownModal').value;
                        const userCode = document.getElementById('userCodeModal').value;
                        const details = descriptionDetails[selectedDescription];

                        // Assuming descriptionDetails is correctly defined and accessible here
                        if (userCode === details.passcode) {
                            closeModal(); // Hide modal on success
                            adjustDataElements(details.value);
                            adjustIframeContentAccess(details.value);
                            sessionStorage.setItem('lastSuccessfulUserDescription', selectedDescription);
                            // Use the selectedDescription as the value to display instead of details.value
                            lastSuccessfulUserValue = selectedDescription;
                        } else {
                            alert('Invalid passcode. Please try again.');
                        }
                        // Clear the passcode input field
                        document.getElementById('userCodeModal').value = "";
                    }



                    function adjustDataElements(userValue) {
                        const dataElements = document.querySelectorAll('[data-value]');
                        dataElements.forEach(element => {
                            const elementValue = parseInt(element.getAttribute('data-value'), 10);
                            if (userValue >= elementValue) {
                                element.style.opacity = '1';
                                element.style.pointerEvents = 'auto';
                                element.classList.remove('disabled-element');
                            } else {
                                element.style.opacity = '0.5';
                                element.style.pointerEvents = 'none';
                                element.classList.add('disabled-element');
                            }
                        });
                    }

                    const proceedButton = document.createElement('button'); proceedButton.textContent = 'Proceed'; document.querySelector('.modal-content').appendChild(proceedButton);

                    proceedButton.addEventListener('click', function () {
                        validateUserCodeModal();
                        displayLastSuccessfulUserValue();
                    });

                    function displayLastSuccessfulUserValue() {
                        const displayElement = document.getElementById('userValueDisplay');
                        displayElement.textContent = "User: " + (lastSuccessfulUserValue || "User Unknown");
                    }

                    document.getElementsByClassName("close")[0].onclick = closeModal; window.onclick = function (event) {
                        if (event.target == document.getElementById('myModal')) {
                            closeModal();
                        }
                    };

                });



                window.onload = function () {
                    const data = localStorage.getItem('excelData');
                    if (data) {
                        window.excelData = JSON.parse(data);
                    }
                };

                function adjustIframeContentAccess(userValue) {
                    const iframes = document.querySelectorAll('iframe');

                    iframes.forEach(iframe => {
                        try {
                            const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
                            const elements = iframeDoc.querySelectorAll('[data-value]');

                            elements.forEach(elem => {
                                const elemValue = parseInt(elem.getAttribute('data-value'), 10);

                                if (userValue >= elemValue) {
                                    // User has sufficient access level
                                    elem.style.opacity = '1'; // Make sure it's visible
                                    elem.contentEditable = "true"; // Allow editing
                                } else {
                                    // User does not have sufficient access
                                    elem.style.opacity = '0.5'; // Make less visible or grayed out
                                    elem.contentEditable = "false"; // Prevent editing
                                }
                            });
                        } catch (error) {
                            console.error("Error accessing iframe contents:", error);
                        }
                    });
                }

                function displayFileNamesFromFolder() {
                    const folderInput = document.getElementById('folderInput');
                    const files = folderInput.files;
                    displayFiles(Array.from(files));
                }

                function displayFileNames() {
                    const fileInput = document.getElementById('fileInput');
                    const files = fileInput.files;
                    displayFiles(Array.from(files));
                }

                function handleCheckbox(event) {
                    const checkbox = event.target;
                    const letterId = checkbox.getAttribute('data-letter-id');  // Get the letterId
                    const fileName = `${letterId}.html`;  // The original tab's filename

                    // Check if the iframe for this letterId already exists
                    const existingIframe = document.querySelector(`iframe[data-filename="${fileName}"]`);

                    if (checkbox.checked) {
                        if (!existingIframe) {
                            // Fetch content and load it as you currently do, only if no existing iframe is found
                            const letterContent = getCheckboxContent(letterId);
                            if (letterContent) {
                                loadFileContentFromCheckbox(fileName, letterContent);
                                const virtualFile = new File([letterContent], fileName, { type: "text/html" });
                                appendFiles([virtualFile]);
                            } else {
                                console.error(`No content found for ${letterId}`);
                            }
                        } else {
                            // If the iframe already exists, just switch to that tab (don't create a new one)
                            switchTab(fileName);
                        }
                    } else {
                        // Remove all iterations of this content that are not frozen
                        removeNonFrozenIterations(letterId);
                    }
                }



                function removeNonFrozenIterations(letterId) {
                    // Select all iframes with data-filename starting with the letterId
                    const iterations = document.querySelectorAll(`iframe[data-filename^="${letterId}"]`);

                    iterations.forEach(iframe => {
                        const fileName = iframe.getAttribute('data-filename');
                        const fileDiv = document.querySelector(`[data-filename-div="${fileName}"]`);

                        // Check if the content is frozen
                        if (fileDiv && fileDiv.getAttribute('data-frozen') !== "true") {
                            // Call your original removeFileFromDisplay function to remove the non-frozen content
                            removeFileFromDisplay(fileName);
                        }
                    });
                }





                // Attach event listeners to all checkboxes after the page loads
                document.addEventListener('DOMContentLoaded', function () {
                    const checkboxes = document.querySelectorAll('#checkboxList input[type="checkbox"]');
                    checkboxes.forEach(checkbox => {
                        checkbox.addEventListener('change', handleCheckbox);
                    });
                });



                function appendFiles(files) {
                    const fileListDiv = document.getElementById('fileList');

                    // Check already displayed files
                    const existingFiles = [...fileListDiv.querySelectorAll('[data-filename-div]')].map(div => div.getAttribute('data-filename-div'));

                    // Append new files
                    for (let i = 0; i < files.length; i++) {
                        const fileName = files[i].name;

                        // If the file is already displayed, skip it
                        if (existingFiles.includes(fileName)) {
                            continue;
                        }

                        const fileDiv = document.createElement('div');
                        fileDiv.setAttribute('data-filename-div', fileName);

                        // Create the checkbox (optional)
                        const checkbox = document.createElement('input');
                        checkbox.type = 'checkbox';
                        checkbox.id = `checkbox-${i}`;
                        checkbox.checked = true;
                        checkbox.style.display = 'none'; // Hide the checkbox visually
                        fileDiv.appendChild(checkbox);

                        // Create the filename span
                        const filenameSpan = document.createElement('span');
                        filenameSpan.textContent = " " + fileName;
                        filenameSpan.style.fontSize = '12px';
                        filenameSpan.style.marginRight = '18px';
                        filenameSpan.style.width = '200px';
                        filenameSpan.style.overflow = 'hidden';
                        filenameSpan.style.whiteSpace = 'nowrap';
                        filenameSpan.style.textOverflow = 'ellipsis';
                        fileDiv.appendChild(filenameSpan);

                        // Add the code input box
                        const codeInput = document.createElement('input');
                        codeInput.type = 'text';
                        codeInput.maxLength = 10;
                        codeInput.style.width = "80px";
                        codeInput.style.marginLeft = 'auto';
                        codeInput.placeholder = 'Code (Optional)';
                        fileDiv.appendChild(codeInput);

                        // Create the freeze button
                        const freezeButton = document.createElement('button');
                        freezeButton.textContent = '🔒';
                        freezeButton.onclick = function () {
                            freezeContent(files[i].name);
                        };
                        fileDiv.appendChild(freezeButton);

                        // Create the print preview button
                        const printPreviewButton = document.createElement('button');
                        printPreviewButton.textContent = '🖨️';
                        printPreviewButton.onclick = function () {
                            individualprintPreview(files[i].name);
                        };
                        fileDiv.appendChild(printPreviewButton);

                        // Create the save button for saving the file
                        const saveButton = document.createElement('button');
                        saveButton.textContent = '💾';
                        saveButton.onclick = (function (fileName) {
                            return function () {
                                const activeIframe = document.querySelector('iframe.active');
                                if (activeIframe) {
                                    activeIframe.contentWindow.dispatchEvent(new Event('beforeSave'));
                                }

                                const fileIDElement = document.getElementById('fileID');
                                const fileID = fileIDElement ? fileIDElement.value : 'defaultName';
                                saveFileContent(fileName, fileID + '-' + fileName);
                            };
                        })(files[i].name);
                        fileDiv.appendChild(saveButton);

                        // Create the save as HTML button
                        const saveAsHtmlButton = document.createElement('button');
                        saveAsHtmlButton.textContent = '🌐';
                        saveAsHtmlButton.onclick = (function (fileName) {
                            return function () {
                                const fileIDElement = document.getElementById('fileID');
                                const fileID = fileIDElement ? fileIDElement.value : 'defaultName';
                                const baseName = fileName.substring(0, fileName.lastIndexOf('.'));
                                const newFileName = fileID + '-' + baseName + '.html';
                                saveFileContent(fileName, newFileName);
                            };
                        })(files[i].name);
                        fileDiv.appendChild(saveAsHtmlButton);

                        // Finally, append the fileDiv to the fileListDiv
                        fileListDiv.appendChild(fileDiv);
                    }
                }

                document.addEventListener("DOMContentLoaded", function () {
                    // Check if auto-selection is required
                    const autoSelectCheckboxes = JSON.parse(sessionStorage.getItem("autoSelectCheckboxes"));

                    if (autoSelectCheckboxes && Array.isArray(autoSelectCheckboxes)) {
                        autoSelectCheckboxes.forEach((checkboxId) => {
                            const checkbox = document.getElementById(checkboxId);
                            if (checkbox) {
                                checkbox.checked = true;

                                // Trigger the handleCheckbox function to load content dynamically
                                const event = new Event("change", { bubbles: true });
                                checkbox.dispatchEvent(event); // Triggers your existing handleCheckbox logic
                            }
                        });

                        // Clear the session storage key after use
                        sessionStorage.removeItem("autoSelectCheckboxes");
                    }
                });





                // Function to dynamically load content into an iframe
                function loadFileContentFromCheckbox(filename, content) {
                    let isFirstTabShown = false;
                    const editorsContainer = document.getElementById('editorsContainer');
                    const tabHeaders = document.getElementById('editableFormTabHeaders');

                    // Create and display a new tab for the virtual file
                    const tabHeader = document.createElement('div');
                    tabHeader.className = 'tab-header';
                    tabHeader.setAttribute('data-filename', filename);
                    tabHeader.textContent = filename;
                    tabHeader.onclick = function () {
                        switchTab(filename);
                    };
                    tabHeaders.appendChild(tabHeader);

                    // Create and display the content in an iframe
                    const iframe = document.createElement('iframe');
                    iframe.className = 'editor';
                    iframe.setAttribute('data-filename', filename);
                    editorsContainer.appendChild(iframe);

                    iframe.onload = function () {
                        // Set the iframe content when fully loaded
                        const iframeDoc = iframe.contentWindow.document;
                        iframeDoc.open();
                        iframeDoc.write(content);
                        iframeDoc.close();

                        iframeDoc.body.contentEditable = "true";
                    };

                    // Load the content into the iframe as HTML
                    const blob = new Blob([content], { type: 'text/html' });
                    const reader = new FileReader();
                    reader.onload = function () {
                        const iframeDoc = iframe.contentWindow.document;
                        iframeDoc.open();
                        iframeDoc.write(reader.result);
                        iframeDoc.close();
                        iframeDoc.body.contentEditable = true;
                        scanAndCreateCheckboxes(iframeDoc, filename);
                        scanEditorForSignatures(iframe);
                    };




                    reader.readAsText(blob);

                    if (!isFirstTabShown) {
                        isFirstTabShown = true;
                        switchTab(filename);  // Switch to this tab when it's the first one
                    }
                }

                document.addEventListener('DOMContentLoaded', function () {
                    // Attach event listeners to the clone buttons
                    const cloneButtons = document.querySelectorAll('.clone-btn');

                    cloneButtons.forEach(button => {
                        button.addEventListener('click', function () {
                            const letterId = button.getAttribute('data-letter-id');
                            const baseFileName = `${letterId}.html`;
                            const existingIframes = document.querySelectorAll(`iframe[data-filename^="${letterId}"]`);

                            // Find the next version number
                            const versionNumber = existingIframes.length + 1;
                            const newFileName = `${letterId}.${versionNumber}.html`;

                            // Fetch the content for the checkbox
                            const letterContent = getCheckboxContent(letterId);

                            if (letterContent) {
                                // Load the cloned content into a new tab/iframe with the new version number
                                loadFileContentFromCheckbox(newFileName, letterContent);

                                // Append the new file to the file list
                                const virtualFile = new File([letterContent], newFileName, { type: "text/html" });
                                appendFiles([virtualFile]);
                            } else {
                                console.error(`No content found for ${letterId}`);
                            }
                        });
                    });
                });


                // Function to remove the file content if the checkbox is unchecked
                function removeFileFromDisplay(fileId) {
                    const fileDiv = document.querySelector(`[data-filename-div="${fileId}"]`);
                    const checkbox = document.querySelector(`input[data-letter-id="${fileId.replace('.html', '')}"]`);

                    // Check if the content is frozen, either for files or checkboxes
                    if (fileDiv && (fileDiv.getAttribute('data-frozen') === "true" || (checkbox && checkbox.getAttribute('data-frozen') === "true"))) {
                        console.log("Content is frozen. It will not be removed.");
                        return; // Skip removal if the content is frozen
                    }

                    // Remove the fileDiv, iframe, and tab associated with this file
                    if (fileDiv) fileDiv.remove();

                    const editor = document.querySelector(`iframe[data-filename="${fileId}"]`);
                    const tabHeader = document.querySelector(`.tab-header[data-filename="${fileId}"]`);
                    if (editor) editor.remove();
                    if (tabHeader) tabHeader.remove();
                }



                function displayFiles(files) {
                    const fileListDiv = document.getElementById('fileList');

                    // Retain only the divs corresponding to frozen files
                    const frozenDivs = [...fileListDiv.querySelectorAll('[data-filename-div]')].filter(fileDiv => {
                        const fileName = fileDiv.getAttribute('data-filename-div');
                        const editor = document.querySelector(`.editor[data-filename="${fileName}"][data-frozen="true"]`);
                        return editor; // Keep only frozen files
                    });

                    fileListDiv.innerHTML = ''; // Clear the file list first

                    // Re-append the frozen divs
                    frozenDivs.forEach(fileDiv => fileListDiv.appendChild(fileDiv));

                    // Display the new files
                    for (let i = 0; i < files.length; i++) {
                        const fileName = files[i].name;
                        const fileType = files[i].type; // Determine file type (e.g., PDF)

                        // Skip if the file is already displayed
                        if (fileListDiv.querySelector(`[data-filename-div="${fileName}"]`)) {
                            continue;
                        }

                        const fileDiv = document.createElement('div');
                        fileDiv.setAttribute('data-filename-div', fileName);

                        const checkbox = document.createElement('input');
                        checkbox.type = 'checkbox';
                        checkbox.id = `checkbox-${i}`;
                        checkbox.checked = true;
                        checkbox.style.display = 'none'; // Hide the checkbox visually
                        fileDiv.appendChild(checkbox);

                        const filenameSpan = document.createElement('span');
                        filenameSpan.textContent = " " + fileName;
                        filenameSpan.style.fontSize = '12px';
                        filenameSpan.style.marginRight = '18px';
                        filenameSpan.style.width = '200px';
                        filenameSpan.style.overflow = 'hidden';
                        filenameSpan.style.whiteSpace = 'nowrap';
                        filenameSpan.style.textOverflow = 'ellipsis';
                        fileDiv.appendChild(filenameSpan);

                        const codeInput = document.createElement('input');
                        codeInput.type = 'text';
                        codeInput.maxLength = 10;
                        codeInput.style.width = "80px";
                        codeInput.style.marginLeft = 'auto';
                        codeInput.placeholder = 'Code (Optional)';
                        fileDiv.appendChild(codeInput);

                        const freezeButton = document.createElement('button');
                        freezeButton.textContent = '🔒';
                        freezeButton.onclick = function () {
                            freezeContent(fileName);
                        };
                        fileDiv.appendChild(freezeButton);

                        const printPreviewButton = document.createElement('button');
                        printPreviewButton.textContent = '🖨️';
                        printPreviewButton.onclick = function () {
                            individualprintPreview(fileName);
                        };
                        fileDiv.appendChild(printPreviewButton);

                        // Save Button
                        const saveButton = document.createElement('button');
                        saveButton.textContent = '💾';
                        saveButton.style.visibility = fileType === "application/pdf" ? "hidden" : "visible"; // Hide for PDFs
                        saveButton.onclick = (function (fileName) {
                            return function () {
                                const activeIframe = document.querySelector('iframe.active');
                                if (activeIframe) {
                                    activeIframe.contentWindow.dispatchEvent(new Event('beforeSave'));
                                }

                                const fileIDElement = document.getElementById('fileID');
                                const fileID = fileIDElement ? fileIDElement.value : 'defaultName';
                                saveFileContent(fileName, fileID + '-' + fileName);
                            };
                        })(fileName);
                        fileDiv.appendChild(saveButton);

                        // Save as HTML Button
                        const saveAsHtmlButton = document.createElement('button');
                        saveAsHtmlButton.textContent = '🌐';
                        saveAsHtmlButton.style.visibility = fileType === "application/pdf" ? "hidden" : "visible"; // Hide for PDFs
                        saveAsHtmlButton.onclick = (function (fileName, fileContent) {
                            return function () {
                                const fileIDElement = document.getElementById('fileID');
                                const fileID = fileIDElement ? fileIDElement.value : 'defaultName';
                                const baseName = fileName.substring(0, fileName.lastIndexOf('.'));
                                const newFileName = fileID + '-' + baseName + '.html';
                                saveFileContent(fileName, newFileName, fileContent);
                            };
                        })(fileName);
                        fileDiv.appendChild(saveAsHtmlButton);

                        fileListDiv.appendChild(fileDiv);
                    }

                    loadFiles(); // Ensure the file editors and tabs are loaded
                }









                let changeCounter = 0;

                function loadFiles() {
                    let isFirstTabShown = false;
                    const filesFromInput = Array.from(document.getElementById('fileInput').files);
                    const filesFromFolder = Array.from(document.getElementById('folderInput').files);
                    const files = [...filesFromInput, ...filesFromFolder];

                    const editorsContainer = document.getElementById('editorsContainer');
                    const tabHeaders = document.getElementById('editableFormTabHeaders');

                    // Identify all frozen editors
                    const frozenEditors = [...document.querySelectorAll('.editor[data-frozen="true"]')].map(e => e.getAttribute('data-filename'));

                    // Identify all selected files
                    const selectedFiles = [];
                    document.querySelectorAll('[data-filename-div] input[type="checkbox"]:checked').forEach(checkbox => {
                        const fileDiv = checkbox.closest('[data-filename-div]');
                        selectedFiles.push(fileDiv.getAttribute('data-filename-div'));
                    });

                    // Merge frozen files and selected files (remove duplicates)
                    const allRetainedFiles = [...new Set([...frozenEditors, ...selectedFiles])];

                    // Remove tabs and editors that are not in allRetainedFiles
                    document.querySelectorAll('.tab-header, .editor').forEach(item => {
                        if (!allRetainedFiles.includes(item.getAttribute('data-filename'))) {
                            item.remove();
                        }
                    });

                    // Load content for selected files if it's not already loaded
                    for (const filename of selectedFiles) {
                        // Check if file is already loaded
                        if (document.querySelector(`iframe[data-filename="${filename}"]`)) {
                            continue; // Skip if already loaded
                        }

                        const file = files.find(f => f.name === filename);
                        if (!file) {
                            continue; // File doesn't exist in the current selection
                        }

                        const reader = new FileReader();
                        reader.onload = function (e) {
                            if (file.type === "application/pdf") {
                                displayPDF(file, filename);
                                // If this is a PDF, and it's the first file, we want to display it
                                if (!isFirstTabShown) {
                                    isFirstTabShown = true;
                                    displayPDFContent(filename); // Placeholder for PDF display function
                                }
                            } else {
                                // Handling for HTML files
                                const tabHeader = document.createElement('div');
                                tabHeader.className = 'tab-header';
                                tabHeader.setAttribute('data-filename', filename);
                                tabHeader.textContent = filename;
                                tabHeader.onclick = function () {
                                    switchTab(filename);
                                };
                                tabHeaders.appendChild(tabHeader);

                                const iframe = document.createElement('iframe');
                                iframe.className = 'editor';
                                iframe.setAttribute('data-filename', filename);
                                editorsContainer.appendChild(iframe);

                                iframe.onload = function () {
                                    // This code will execute once the iframe content is fully loaded
                                    if (lastSuccessfulUserValue !== null) {
                                        // Now it's safe to adjust access, as the iframe content is fully loaded
                                        adjustIframeContentAccess(lastSuccessfulUserValue);
                                    }
                                    // Deserialize dropdown content
                                    deserializeDropdownContent(iframe);
                                    updateAllIframesWithNewData();
                                };

                                const iframeDoc = iframe.contentWindow.document;
                                iframeDoc.open();
                                iframeDoc.write(e.target.result);
                                iframeDoc.close();

                                iframeDoc.body.contentEditable = "true";

                                scanAndCreateCheckboxes(iframeDoc, filename);
                                scanEditorForSignatures(iframe);

                                // Checking if excelData exists and then populating
                                if (window.excelData) {
                                    Object.keys(window.excelData).forEach(key => {
                                        const elem = iframeDoc.getElementById(key); // Accessing iframe's document
                                        if (elem) {
                                            elem.innerText = window.excelData[key];
                                        }
                                    });
                                }


                                const changeObserver = new MutationObserver((mutations) => {
                                    mutations.forEach((mutation) => {
                                        let changeDescription = "";

                                        if (mutation.type === "childList") {
                                            if (mutation.addedNodes.length) {
                                                let addedText = Array.from(mutation.addedNodes).map(getNodeText).join("; ");
                                                changeDescription = "Added: " + addedText;
                                            }
                                            if (mutation.removedNodes.length) {
                                                let removedText = Array.from(mutation.removedNodes).map(getNodeText).join("; ");
                                                changeDescription += changeDescription.length > 0 ? " | " : "";
                                                changeDescription += "Deleted: " + removedText;
                                            }
                                        } else if (mutation.type === "characterData") {
                                            changeDescription = "Text updated: " + getNodeText(mutation.target);
                                        }

                                        if (changeDescription.length > 0) {
                                            trackChange(filename, changeDescription);
                                        }
                                    });
                                });
                                changeObserver.observe(iframeDoc.body, { childList: true, subtree: true, characterData: true });

                                if (!isFirstTabShown) {
                                    isFirstTabShown = true;
                                    switchTab(filename); // Switch to the tab of the first HTML file
                                }
                            }
                        };

                        reader.readAsText(file);
                    }

                    if (lastSuccessfulUserValue !== null) {
                        adjustIframeContentAccess(lastSuccessfulUserValue); // Adjust access based on the last successful user value
                    }

                    const processedFiles = getProcessedFiles(); // Implement this function based on your needs
                    files.forEach(file => {
                        if (!processedFiles.includes(file.name)) {
                            processFile(file); // Process the file only if it hasn't been processed yet
                        }
                    });
                }

                function handleChildListMutation(mutation) {
                    let description = "";
                    if (mutation.removedNodes.length > 0) {
                        description = "Deleted: " + getNodeText(mutation.removedNodes[0]);
                    }
                    if (mutation.addedNodes.length > 0) {
                        description += description.length > 0 ? "; " : "";
                        description += "Added: " + getNodeText(mutation.addedNodes[0]);
                    }
                    return description;
                }



                function displayPDF(file, filename) {
                    const pdfTabHeaders = document.getElementById('pdfTabHeaders');
                    const pdfEditorsContainer = document.getElementById('pdfEditorsContainer');

                    // Validate DOM elements
                    if (!pdfTabHeaders || !pdfEditorsContainer) {
                        console.error('Missing DOM elements: pdfTabHeaders or pdfEditorsContainer');
                        return;
                    }

                    // Create Tab Header for the PDF
                    const tabHeader = document.createElement('div');
                    tabHeader.className = 'tab-header pdf-file';
                    tabHeader.setAttribute('data-filename', filename);
                    tabHeader.textContent = filename;
                    tabHeader.onclick = function () {
                        switchTab(filename);
                    };
                    pdfTabHeaders.appendChild(tabHeader);

                    // Validate the file object
                    if (!file || !(file instanceof Blob)) {
                        console.error('Invalid file passed to displayPDF:', file);
                        return;
                    }

                    // Check if the container for the file already exists
                    let existingContainer = document.querySelector(`.editor[data-filename="${filename}"]`);
                    if (existingContainer) {
                        console.log(`Container already exists for: ${filename}`);
                        return;
                    }

                    // Create a new iframe for displaying the PDF
                    const iframe = document.createElement('iframe');
                    iframe.className = 'editor pdf-editor'; // Add pdf-editor class to identify PDFs
                    iframe.setAttribute('data-filename', filename);
                    iframe.src = URL.createObjectURL(file); // Create a Blob URL for the PDF
                    iframe.style.width = '100%';
                    iframe.style.height = '100%';
                    iframe.style.border = 'none';
                    pdfEditorsContainer.appendChild(iframe);

                    console.log(`PDF container created for: ${filename}`);
                }







                function switchTab(filename) {
                    const tabHeader = document.querySelector(`.tab-header[data-filename="${filename}"]`);
                    const editor = document.querySelector(`.editor[data-filename="${filename}"]`);

                    if (!tabHeader || !editor) {
                        console.error(`Tab or editor not found for filename: ${filename}`);
                        return;
                    }

                    // Deactivate all tabs and editors
                    document.querySelectorAll('.tab-header, .editor').forEach((el) => el.classList.remove('active'));

                    // Activate the selected tab and editor
                    tabHeader.classList.add('active');
                    editor.classList.add('active');
                }




                function scanAndCreateCheckboxes(iframeDoc, filename) {
                    const spans = iframeDoc.querySelectorAll('span[id]');
                    spans.forEach(span => {
                        createCheckboxForSpan(span, filename);
                    });
                }



                document.getElementById('openInsertDropdown').addEventListener('click', function () {
                    const windowFeatures = 'width=500,height=600,left=10,top=10,resizable=yes';
                    const popupWindow = window.open('', 'popupWindow', windowFeatures);

                    popupWindow.document.write('<html><head><title>Insert Dropdown</title>');
                    popupWindow.document.write('<style>input, textarea { width: calc(100% - 10px); box-sizing: border-box; margin-bottom: 5px; }');
                    popupWindow.document.write('.inline-element { display: inline-block; }');
                    popupWindow.document.write('.dropdown-container { background-color: lightyellow; }');
                    popupWindow.document.write('</style>');
                    popupWindow.document.write('</head><body>');

                    popupWindow.document.write('<div class="data-element-container" style="position: absolute; top: 10px; right: 10px; width: 45%;">');
                    popupWindow.document.write('<label for="dataElementId">Data Element ID</label><br>');
                    popupWindow.document.write('<input type="text" id="dataElementId" placeholder="Enter Element ID"><br>');
                    popupWindow.document.write('<label for="dataElementLabel">Element Description</label><br>');
                    popupWindow.document.write('<input type="text" id="dataElementLabel" placeholder="Enter Label"><br>');
                    popupWindow.document.write('<button id="insertDataElementButton">Insert Data Element</button>');
                    popupWindow.document.write('</div>');

                    popupWindow.document.write('<div style="margin-top: 140px;">');
                    popupWindow.document.write('<form id="dropdownForm">');
                    popupWindow.document.write('<h3>Add Dropdown Options</h3>');
                    for (let i = 1; i <= 5; i++) {
                        popupWindow.document.write('<label for="option' + i + '">Option ' + i + '</label><br>');
                        popupWindow.document.write('<textarea id="option' + i + '">ENTER OPTION ' + i + '</textarea><br>');
                    }
                    popupWindow.document.write('<button type="button" id="insertDropdownButton">Insert Dropdown</button>');
                    popupWindow.document.write('</form>');
                    popupWindow.document.write('</div>');

                    popupWindow.document.write('<script>');
                    popupWindow.document.write('var currentOptionId = null;');
                    popupWindow.document.write('document.querySelectorAll("textarea").forEach(textarea => {');
                    popupWindow.document.write('textarea.addEventListener("focus", function() { currentOptionId = this.id; });');
                    popupWindow.document.write('});');

                    popupWindow.document.write('document.getElementById("insertDataElementButton").onclick = function() {');
                    popupWindow.document.write('if (currentOptionId) {');
                    popupWindow.document.write('var dataElementId = document.getElementById("dataElementId").value;');
                    popupWindow.document.write('var dataElementLabel = document.getElementById("dataElementLabel").value;');
                    popupWindow.document.write('var textarea = document.getElementById(currentOptionId);');
                    popupWindow.document.write('var cursorPosition = textarea.selectionStart;');
                    popupWindow.document.write('var textBeforeCursor = textarea.value.substring(0, cursorPosition);');
                    popupWindow.document.write('var textAfterCursor = textarea.value.substring(cursorPosition);');
                    popupWindow.document.write('textarea.value = textBeforeCursor + " <span class=\'data-element inline-element\' data-key=\'" + dataElementId + "\'>$" + dataElementLabel + "$</span> " + textAfterCursor;');
                    popupWindow.document.write('}');
                    popupWindow.document.write('};');

                    popupWindow.document.write('document.getElementById("insertDropdownButton").onclick = function() {');
                    popupWindow.document.write('var options = [];');
                    popupWindow.document.write('for (let i = 1; i <= 5; i++) {');
                    popupWindow.document.write('var optionValue = document.getElementById("option" + i).value;');
                    popupWindow.document.write('if (optionValue) options.push(optionValue);');
                    popupWindow.document.write('}');
                    popupWindow.document.write('window.opener.insertDropdown(options);');
                    popupWindow.document.write('window.close();');
                    popupWindow.document.write('};');
                    popupWindow.document.write('<\/script>');

                    popupWindow.document.write('</body></html>');
                });

                function insertDropdown(options) {
                    const activeIframe = document.querySelector('iframe.active');
                    if (!activeIframe) return;

                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    const iframeSelection = activeIframe.contentWindow.getSelection();
                    if (!iframeSelection.rangeCount) return;

                    const range = iframeSelection.getRangeAt(0);
                    range.deleteContents();

                    const uniqueId = 'dropdown-' + Date.now();
                    const dropdownContainer = document.createElement('span'); // Changed to span for inline display
                    dropdownContainer.id = uniqueId;
                    dropdownContainer.classList.add('dropdown-container', 'inline-element'); // Added inline-element class and dropdown-container

                    const select = document.createElement('select');
                    select.style.backgroundColor = 'lightyellow'; // Light yellow background color
                    select.style.whiteSpace = 'pre-wrap'; // Allow text to wrap
                    select.style.overflow = 'visible'; // Allow overflow to be visible
                    select.style.maxWidth = '1100px'; // Maximum width to mimic a standard sheet of paper
                    options.forEach(option => {
                        const opt = document.createElement('option');
                        opt.value = option;
                        opt.innerHTML = option; // Use the innerHTML directly to preserve the spans
                        select.appendChild(opt);
                    });


                    function resizeSelectBox() {
                        const dummySpan = document.createElement('span');
                        dummySpan.style.visibility = 'hidden';
                        dummySpan.style.whiteSpace = 'pre-wrap';
                        dummySpan.style.position = 'absolute'; // Remove from document flow
                        dummySpan.style.maxWidth = '1100px'; // Ensure the width matches the dropdown max width
                        dummySpan.innerHTML = select.selectedOptions[0].innerHTML;
                        document.body.appendChild(dummySpan);
                        select.style.width = Math.min(dummySpan.offsetWidth + 20, 1100) + 'px'; // Adjust the width to fit the content with padding
                        select.style.height = dummySpan.offsetHeight + 'px'; // Adjust the height to fit the content
                        document.body.removeChild(dummySpan);
                    }

                    select.addEventListener('change', function () {
                        resizeSelectBox();
                        dropdownContainer.setAttribute('data-selected-value', select.value);
                    });
                    dropdownContainer.appendChild(select);

                    const confirmButton = document.createElement('button');
                    confirmButton.textContent = "Confirm Selection";
                    confirmButton.classList.add('inline-element', 'confirm-selection-button');
                    confirmButton.addEventListener('click', function () {
                        const selectedOption = select.selectedOptions[0];
                        const selectedValue = selectedOption.innerHTML;
                        const displayDiv = document.createElement('span'); // Changed to span for inline display
                        displayDiv.innerHTML = selectedValue;
                        displayDiv.classList.add('confirmed-selection', 'inline-element'); // Added inline-element class

                        dropdownContainer.replaceWith(displayDiv);
                        displayDiv.setAttribute('data-last-editor', 'user'); // Replace 'user' with the actual user info
                        displayDiv.setAttribute('data-last-edit-time', new Date().toISOString());
                        displayDiv.setAttribute('data-selected-value', select.value);
                    });
                    dropdownContainer.appendChild(confirmButton);

                    range.insertNode(dropdownContainer);
                    range.setStartAfter(dropdownContainer);
                    range.setEndAfter(dropdownContainer);
                    iframeSelection.removeAllRanges();
                    iframeSelection.addRange(range);

                    // Initial resize to fit the first option
                    resizeSelectBox();
                }

                function deserializeDropdownContent(iframe) {
                    const doc = iframe.contentWindow.document;

                    const dropdownContainers = doc.querySelectorAll('.dropdown-container');
                    dropdownContainers.forEach(container => {
                        const optionsData = container.getAttribute('data-options');
                        const selectedValue = container.getAttribute('data-selected-value'); // Get the selected value
                        if (optionsData) {
                            const options = JSON.parse(optionsData);
                            const select = container.querySelector('select');
                            if (select) {
                                select.innerHTML = ''; // Clear existing options
                                options.forEach(optionData => {
                                    const option = document.createElement('option');
                                    option.value = optionData.value;
                                    option.innerHTML = optionData.innerHTML; // Restore innerHTML
                                    select.appendChild(option);
                                });
                                select.value = selectedValue; // Set the selected value
                            }
                        }
                    });

                    // Deserialize text options
                    const textOptionsContainers = doc.querySelectorAll('[id^="textOptionsContainer-"]');
                    textOptionsContainers.forEach(container => {
                        const optionsData = container.getAttribute('data-options');
                        if (optionsData) {
                            const optionsList = container.querySelector('.optionsList');
                            if (optionsList) {
                                const options = JSON.parse(optionsData);
                                optionsList.innerHTML = ''; // Clear existing options
                                options.forEach(optionHTML => {
                                    const option = document.createElement('div');
                                    option.innerHTML = optionHTML;
                                    optionsList.appendChild(option);

                                });
                                console.log(`Deserialized text options for container ${container.id}:`, options);
                            }
                        }
                    });

                    // Deserialize checkbox options
                    const checkboxOptionsContainers = doc.querySelectorAll('[id^="checkboxOptionsContainer-"]');
                    checkboxOptionsContainers.forEach(container => {
                        const optionsData = container.getAttribute('data-options');
                        if (optionsData) {
                            const optionsList = container.querySelector('.optionsList');
                            if (optionsList) {
                                const options = JSON.parse(optionsData);
                                optionsList.innerHTML = ''; // Clear existing options
                                options.forEach(optionData => {
                                    const option = document.createElement('div');
                                    option.className = 'option';

                                    const textarea = document.createElement('textarea');
                                    textarea.value = optionData.value;

                                    const checkbox = document.createElement('input');
                                    checkbox.type = 'checkbox';
                                    checkbox.checked = optionData.checked;

                                    // Create the remove button and attach it
                                    const removeButton = document.createElement('button');
                                    removeButton.className = 'removeButton';
                                    removeButton.textContent = '-';
                                    removeButton.addEventListener('click', function () {
                                        option.remove();
                                    });

                                    // Append all elements to the option div
                                    option.appendChild(textarea);
                                    option.appendChild(checkbox);
                                    option.appendChild(removeButton); // Append the remove button
                                    optionsList.appendChild(option);
                                });

                                console.log(`Deserialized checkbox options for container ${container.id}:`, options);
                            }
                        }
                    });
                }




                function createCheckboxForSpan(span, filename) {
                    const checkboxContainer = document.getElementById('checkboxContainer');
                    const iframe = document.querySelector(`iframe[data-filename="${filename}"]`);
                    const isContentFrozen = iframe && iframe.getAttribute('data-frozen') === 'true';

                    // Create a wrapper div for this checkbox, label, and button
                    const div = document.createElement('div');
                    div.style.display = 'flex';
                    div.style.alignItems = 'center'; // Align items vertically centered
                    div.style.justifyContent = 'space-between'; // Space items apart

                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.checked = true; // Checkbox starts checked (span visible by default)
                    checkbox.disabled = isContentFrozen; // Disable checkbox if content is frozen
                    checkbox.setAttribute('data-filename', filename); // Add filename to the checkbox for reference
                    checkbox.onchange = () => toggleSpan(span.id, filename, checkbox.checked, isContentFrozen);

                    const label = document.createElement('label');
                    label.textContent = filename + ' - ' + span.id; // Create a label with filename and span ID
                    label.style.flexGrow = '1'; // Make the label take up the available space
                    label.style.marginRight = '10px'; // Optional: Add some spacing between the label and the button

                    if (isContentFrozen) {
                        label.style.color = 'red'; // Label is red if content is frozen
                    }

                    // Create the Insert button to clone the span and insert it at the cursor
                    const insertButton = document.createElement('button');
                    insertButton.textContent = 'Insert';
                    insertButton.disabled = isContentFrozen; // Disable if content is frozen
                    insertButton.onclick = () => insertSpanAtCursor(span, filename); // Call function to clone and insert span

                    // Align the Insert button to the right using margin-left: auto
                    insertButton.style.marginLeft = 'auto'; // Push the button to the right

                    // Append the checkbox, label, and Insert button to the wrapper div
                    div.appendChild(checkbox);
                    div.appendChild(label);
                    div.appendChild(insertButton);

                    // Append the wrapper div to the container
                    checkboxContainer.appendChild(div);
                }





                function toggleSpan(spanId, filename, isChecked, isContentFrozen) {
                    if (isContentFrozen) return; // Exit the function if the content is frozen, no toggle allowed

                    const iframe = document.querySelector(`iframe[data-filename="${filename}"]`);
                    if (!iframe) return; // Exit if no iframe is found

                    const iframeDoc = iframe.contentWindow.document;
                    const span = iframeDoc.getElementById(spanId); // Find the span element by its ID
                    if (span) {
                        // Toggle visibility: show the span if checked, hide if unchecked
                        span.style.display = isChecked ? 'block' : 'none';
                    }
                }



                const spanCloneCounts = {};
                function insertSpanAtCursor(span, filename) {
                    const iframe = document.querySelector(`iframe[data-filename="${filename}"]`);
                    if (!iframe) return;

                    const isContentFrozen = iframe.getAttribute('data-frozen') === 'true';
                    if (isContentFrozen) {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    const iframeDoc = iframe.contentWindow.document;
                    const iframeSelection = iframe.contentWindow.getSelection();
                    if (!iframeSelection.rangeCount) return; // Ensure there's a selection range

                    const range = iframeSelection.getRangeAt(0);
                    range.deleteContents(); // Remove any selected content before inserting the new span

                    // Retrieve the original span ID
                    const originalSpanId = span.id;

                    // Initialize or increment the count for this span ID
                    if (!spanCloneCounts[originalSpanId]) {
                        spanCloneCounts[originalSpanId] = 1;
                    } else {
                        spanCloneCounts[originalSpanId]++;
                    }

                    // Clone the span and give it a new unique ID
                    const clonedSpan = span.cloneNode(true);
                    clonedSpan.id = `${spanCloneCounts[originalSpanId]}_${originalSpanId}`;

                    // Insert the cloned span at the cursor position
                    range.insertNode(clonedSpan);


                    // Move the cursor after the inserted span
                    range.setStartAfter(clonedSpan);
                    range.setEndAfter(clonedSpan);
                    iframeSelection.removeAllRanges();
                    iframeSelection.addRange(range);
                }







                function updateCheckboxStates() {
                    const checkboxContainer = document.getElementById('checkboxContainer');
                    if (!checkboxContainer) return;

                    const checkboxes = checkboxContainer.querySelectorAll('input[type="checkbox"]');
                    checkboxes.forEach(checkbox => {
                        const filename = checkbox.getAttribute('data-filename');
                        const iframe = document.querySelector(`iframe[data-filename="${filename}"]`);
                        const isContentFrozen = iframe && iframe.getAttribute('data-frozen') === 'true';

                        checkbox.disabled = isContentFrozen;
                        checkbox.nextElementSibling.style.color = isContentFrozen ? 'red' : ''; // Assuming the next sibling is the label
                    });
                }


                function freezeContent(filename) {
                    const editorIframe = document.querySelector(`iframe[data-filename="${filename}"]`);
                    const fileDiv = document.querySelector(`[data-filename-div="${filename}"]`);
                    const freezeButton = fileDiv.querySelector('button');
                    const codeInput = fileDiv.querySelector('input[type="text"]');
                    const isPdfFile = editorIframe.classList.contains("pdf-editor"); // Check if the iframe is for a PDF

                    if (editorIframe.getAttribute('data-frozen') === 'true') {
                        // Unfreeze the content
                        const storedCode = editorIframe.getAttribute('data-code');

                        if (storedCode && codeInput.value !== storedCode && codeInput.value !== MASTER_CODE) {
                            alert("Incorrect code!");
                            return;
                        }

                        codeInput.value = storedCode || "";
                        codeInput.placeholder = 'Code (Optional)';

                        if (!isPdfFile) {
                            setIframeContentEditable(editorIframe, true);
                        }

                        editorIframe.removeAttribute('data-frozen');
                        editorIframe.removeAttribute('data-code');
                        fileDiv.removeAttribute('data-frozen');

                        fileDiv.style.color = 'black';
                        freezeButton.textContent = '🔒';
                    } else {
                        // Freeze the content
                        if (codeInput.value) {
                            editorIframe.setAttribute('data-code', codeInput.value);
                        }
                        codeInput.value = "";
                        codeInput.placeholder = 'Enter code';

                        if (!isPdfFile) {
                            setIframeContentEditable(editorIframe, false);
                        }

                        editorIframe.setAttribute('data-frozen', 'true');
                        fileDiv.setAttribute('data-frozen', 'true');

                        fileDiv.style.color = 'red';
                        freezeButton.textContent = '🗝️';
                    }
                }





                function setIframeContentEditable(iframe, isEditable) {
                    const contentDocument = iframe.contentDocument || iframe.contentWindow.document;
                    const setEditable = (node) => {
                        if (node.nodeType === 1) { // Element node
                            node.contentEditable = isEditable.toString();
                            for (let i = 0; i < node.childNodes.length; i++) {
                                setEditable(node.childNodes[i]);
                            }
                        }
                    }
                    setEditable(contentDocument.body);
                }



                function handleFile(e) {
                    const files = e.target.files;
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const data = e.target.result;
                        const workbook = XLSX.read(data, { type: 'binary' });

                        const sheetName = workbook.SheetNames[0];
                        const sheet = workbook.Sheets[sheetName];
                        const dropdown = document.getElementById('dropdown');

                        dropdown.innerHTML = ''; // Clear old options

                        let rowIndex = 2;
                        while (sheet['A' + rowIndex] && sheet['B' + rowIndex]) {
                            const option = document.createElement('option');
                            const valueA = sheet['A' + rowIndex].v;
                            const valueB = sheet['B' + rowIndex].v;

                            option.value = valueB; // Use the value from column B
                            option.textContent = `${valueA} - ${valueB}`; // Display text as 'ColumnA - ColumnB'
                            dropdown.appendChild(option);
                            rowIndex++;
                        }
                    };
                    reader.readAsBinaryString(files[0]);
                }




                const parentTabHeaders = document.querySelectorAll(".parent-tab-header");
                const parentTabContents = document.querySelectorAll(".parent-tab-content");

                parentTabHeaders.forEach(header => {
                    header.addEventListener("click", () => {
                        // Remove active class from all headers and contents
                        parentTabHeaders.forEach(h => h.classList.remove("active"));
                        parentTabContents.forEach(c => c.classList.remove("active"));

                        // Add active class to clicked header and corresponding content
                        header.classList.add("active");
                        const contentToShow = document.querySelector(`.parent-tab-content[data-content="${header.getAttribute('data-tab')}"]`);
                        contentToShow.classList.add("active");
                    });
                });

                function individualprintPreview(filename) {
                    // Determine if the file is an HTML or PDF file based on its extension
                    const isHtmlFile = filename.endsWith('.wftu') || filename.endsWith('.html');
                    const isPdfFile = filename.endsWith('.pdf');

                    if (isHtmlFile) {
                        // Handle HTML file print preview
                        const iframe = document.querySelector(`iframe[data-filename="${filename}"]`);
                        if (iframe) {
                            // Access the iframe content for HTML files
                            const iframeContent = iframe.contentDocument || iframe.contentWindow.document;

                            // Open a new window for the print preview
                            const printWindow = window.open('', '_blank', 'width=800,height=600');
                            if (printWindow) {
                                printWindow.document.open();
                                printWindow.document.write('<html><head><title>Print Preview</title><style>body{font-family:Arial,sans-serif}</style></head><body>');
                                printWindow.document.write(iframeContent.documentElement.outerHTML); // Copy the iframe content
                                printWindow.document.write('</body></html>');
                                printWindow.document.close();

                                // Wait for the window content to load before triggering print
                                printWindow.onload = function () {
                                    setTimeout(function () {
                                        printWindow.focus();  // Focus the new window
                                        printWindow.print();  // Trigger the print dialog
                                        printWindow.onafterprint = function () {
                                            printWindow.close();  // Close the window after printing
                                        };
                                    }, 500); // Delay to ensure content fully loads
                                };
                            } else {
                                console.error("Failed to open print window.");
                            }
                        } else {
                            console.error(`Iframe not found for file: ${filename}`);
                        }
                    } else if (isPdfFile) {
                        // Handle PDF file print preview
                        const files = document.getElementById('fileInput').files; // Assuming fileInput is your input element
                        const file = Array.from(files).find(f => f.name === filename);

                        if (file) {
                            const pdfUrl = URL.createObjectURL(file);
                            const pdfWindow = window.open(pdfUrl, '_blank');
                            if (pdfWindow) {
                                pdfWindow.onload = function () {
                                    pdfWindow.focus();
                                    pdfWindow.print();  // Trigger print for PDF
                                };
                            }
                        } else {
                            console.log(`File not found: ${filename}`);
                        }
                    } else {
                        console.log(`Print preview not supported for file: ${filename}`);
                    }
                }






                function toggleEntityType(entityType) {
                    // Example: Log the selected entity type
                    console.log("Selected Entity Type:", entityType);

                    // Example logic based on entity type selection
                    if (entityType === "Individual") {
                        // Actions when Individual is selected
                        console.log("Individual selected.");
                    } else if (entityType === "NonIndividual") {
                        // Actions when NonIndividual is selected
                        console.log("NonIndividual selected.");
                    }
                }

                document.getElementById('individualRadio').addEventListener('change', function () {
                    if (this.checked) {
                        toggleEntityType('Individual');
                    }
                });

                document.getElementById('nonIndividualRadio').addEventListener('change', function () {
                    if (this.checked) {
                        toggleEntityType('NonIndividual');
                    }
                });

                let borrowerCount = 0;
                let guarantorCount = 0;
                let hypothecatorCount = 0;
                let signerCount = 0;


                function addToDropdown() {
                    // Get the dropdown and the currently selected option (if any)
                    var dropdown = document.getElementById("userDataDropdown");
                    var editingEntityId = dropdown.getAttribute("data-editing-entity-id");

                    // Get the selected entity type (Individual/NonIndividual)
                    var entityType = document.querySelector('input[name="entityType"]:checked')?.value || "";

                    // Get the contact information
                    var firstName = document.getElementById("firstName").value.trim();
                    var middleName = document.getElementById("middleName").value.trim();
                    var lastName = document.getElementById("lastName").value.trim();
                    var streetAddress = document.getElementById("streetAddress").value.trim();
                    var city = document.getElementById("city").value.trim();
                    var title = document.getElementById("title").value.trim();
                    var email = document.getElementById("email").value.trim();
                    var phone = document.getElementById("phone").value.trim();
                    var entityTypeStructure = document.getElementById("entityTypeStructure").value.trim();

                    // Get the selected checkboxes and store roles
                    var roles = [];
                    if (document.getElementById("checkboxBorrower").checked) {
                        roles.push("Borrower");
                    }
                    if (document.getElementById("checkboxGuarantor").checked) {
                        roles.push("Guarantor");
                    }
                    if (document.getElementById("checkboxHypothecator").checked) {
                        roles.push("Hypothecator");
                    }
                    if (document.getElementById("checkboxSigner").checked) {
                        roles.push("Signer");
                    }

                    // Construct the dropdown option text
                    var optionText = (entityType ? entityType + " - " : "") + firstName + " " + middleName + " " + lastName + " - " + streetAddress + " - " + city + " - " + title;

                    // Determine if we are editing or adding a new entity
                    var entityId = editingEntityId || `${(firstName + middleName + lastName).replace(/\s+/g, '')}${Math.floor(100000000 + Math.random() * 900000000)}`;
                    var existingOption = Array.from(dropdown.options).find(option => option.getAttribute("data-entity-id") === entityId);

                    if (existingOption) {
                        // Update the existing option
                        existingOption.text = optionText;
                        existingOption.value = optionText;
                        existingOption.setAttribute("data-entity-type", entityType);
                        existingOption.setAttribute("data-firstname", firstName);
                        existingOption.setAttribute("data-middlename", middleName);
                        existingOption.setAttribute("data-lastname", lastName);
                        existingOption.setAttribute("data-streetaddress", streetAddress);
                        existingOption.setAttribute("data-city", city);
                        existingOption.setAttribute("data-title", title);
                        existingOption.setAttribute("data-email", email);
                        existingOption.setAttribute("data-phone", phone);
                        existingOption.setAttribute("data-entitytypestructure", entityTypeStructure);
                        existingOption.setAttribute("data-roles", roles.join(", "));
                    } else {
                        // Add a new option if no existing option matches
                        var newOption = document.createElement("option");
                        newOption.text = optionText;
                        newOption.value = optionText;
                        newOption.setAttribute("data-entity-id", entityId);
                        newOption.setAttribute("data-entity-type", entityType);
                        newOption.setAttribute("data-firstname", firstName);
                        newOption.setAttribute("data-middlename", middleName);
                        newOption.setAttribute("data-lastname", lastName);
                        newOption.setAttribute("data-streetaddress", streetAddress);
                        newOption.setAttribute("data-city", city);
                        newOption.setAttribute("data-title", title);
                        newOption.setAttribute("data-email", email);
                        newOption.setAttribute("data-phone", phone);
                        newOption.setAttribute("data-entitytypestructure", entityTypeStructure);
                        newOption.setAttribute("data-roles", roles.join(", "));
                        dropdown.add(newOption);
                    }

                    // Clear the editing entity ID after save
                    dropdown.removeAttribute("data-editing-entity-id");

                    // Clear the input fields after adding or updating
                    document.getElementById("firstName").value = "";
                    document.getElementById("middleName").value = "";
                    document.getElementById("lastName").value = "";
                    document.getElementById("streetAddress").value = "";
                    document.getElementById("city").value = "";
                    document.getElementById("title").value = "";
                    document.getElementById("email").value = "";
                    document.getElementById("phone").value = "";
                    document.getElementById("entityTypeStructure").value = "";

                    // Clear the radio buttons
                    document.querySelectorAll('input[name="entityType"]').forEach(radio => (radio.checked = false));

                    // Clear the checkboxes
                    document.getElementById("checkboxBorrower").checked = false;
                    document.getElementById("checkboxGuarantor").checked = false;
                    document.getElementById("checkboxHypothecator").checked = false;
                    document.getElementById("checkboxSigner").checked = false;
                }






                // Function to populate dropdown from session storage
                function populateDropdownFromSession() {
                    var sessionData = JSON.parse(sessionStorage.getItem('userDataDropdown')) || [];
                    var dropdown = document.getElementById("userDataDropdown");
                    dropdown.innerHTML = ""; // Clear existing options

                    sessionData.forEach(entity => {
                        var newOption = document.createElement("option");
                        newOption.text = (entity.entityType ? entity.entityType + " - " : "") + entity.firstName + " " + entity.middleName + " " + entity.lastName + " - " + entity.streetAddress + " - " + entity.city + " - " + entity.title;
                        newOption.value = newOption.text;
                        newOption.setAttribute('data-entity-id', entity.entityId);
                        dropdown.add(newOption);
                    });
                }

                // Call this function on page load
                document.addEventListener("DOMContentLoaded", populateDropdownFromSession);

                function getSelectedEntityId() {
                    const dropdown = document.getElementById('userDataDropdown');
                    const selectedOption = dropdown.options[dropdown.selectedIndex];
                    const entityId = selectedOption.getAttribute('data-entity-id');
                    console.log('Selected Entity ID:', entityId);
                    return entityId;
                }

                document.getElementById('insertNameBtn').addEventListener('click', insertNameOnly);

                function insertNameOnly() {
                    // Determine which dropdown is active (either the original or the clone)
                    const originalDropdown = document.getElementById('userDataDropdown');
                    const clonedDropdown = document.getElementById('clonedDropdown');

                    // Check if a valid selection is made from either dropdown
                    const selectedDropdown = originalDropdown.selectedIndex !== -1 ? originalDropdown : clonedDropdown.selectedIndex !== -1 ? clonedDropdown : null;

                    if (!selectedDropdown) {
                        alert('Please select an entity from one of the dropdowns.');
                        return;
                    }

                    const selectedOption = selectedDropdown.options[selectedDropdown.selectedIndex];
                    const selectedText = selectedOption.value;

                    // Split the selected text into parts
                    const parts = selectedText.split('-').map(part => part.trim()).filter(part => part !== '');

                    // Identify the full name (assuming it's always in the second position in the dropdown)
                    const fullName = parts[1];

                    if (!fullName) {
                        alert('No name found in the selected entity.');
                        return;
                    }

                    // Get the active iframe and its document
                    const activeIframe = document.querySelector('iframe.active');
                    if (!activeIframe) return;

                    // Check if the iframe is frozen
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    const iframeDoc = activeIframe.contentDocument || activeIframe.contentWindow.document;
                    const iframeSelection = iframeDoc.getSelection();

                    if (!iframeSelection.rangeCount) return;

                    const range = iframeSelection.getRangeAt(0);
                    range.deleteContents();

                    // Insert the full name only
                    const span = iframeDoc.createElement('span');
                    span.textContent = fullName;
                    range.insertNode(span);

                    // Move the cursor after the inserted text
                    range.setStartAfter(span);
                    range.setEndAfter(span);
                    iframeSelection.removeAllRanges();
                    iframeSelection.addRange(range);
                }

                function insertSignatureLine() {
                    const dropdown = document.getElementById('userDataDropdown');
                    const selectedOption = dropdown.options[dropdown.selectedIndex];
                    const selectedText = selectedOption.value;

                    // Get the unique Entity ID from the selected option
                    const entityId = selectedOption.getAttribute('data-entity-id');

                    // Split the selected text into parts
                    const parts = selectedText.split('-').map(part => part.trim()).filter(part => part !== '');

                    // Identify the entityType and fullName
                    const entityType = parts[0].trim();  // Make sure to trim any extra spaces
                    const fullName = parts[1];

                    // Create a unique span ID using the entity ID
                    const spanId = `entity-${entityId}`;

                    // Identify the title and roles
                    let title = '';
                    let roles = '';
                    for (let i = 2; i < parts.length; i++) {
                        if (parts[i].startsWith("Roles:")) {
                            roles = parts[i];
                            break;
                        } else {
                            title = parts[i]; // This assumes that the last segment before roles (if present) is the title
                        }
                    }

                    // Define a base underscore line and its length
                    let underscoreLine = '______________________________________';
                    const baseUnderscoreLength = underscoreLine.length;

                    let formattedText = '';

                    if (entityType === 'Individual') {
                        // Calculate if the name length exceeds the underscore length
                        if (fullName.length > baseUnderscoreLength) {
                            const extraUnderscoresNeeded = fullName.length - baseUnderscoreLength;
                            underscoreLine += '_'.repeat(extraUnderscoresNeeded);
                        }

                        // Include the underscores and name in the formatted text
                        formattedText = `<div style="display: inline-block;" class="container">
                                    <span>${underscoreLine}<br>
            <div style="display: flex; justify-content: space-between;">
                <span>${fullName}</span>
            </div>
            <br>${title}
        </span>
                                 </div><br>`;
                    } else if (entityType === 'NonIndividual') {
                        formattedText = `<div style="display: inline-block;" class="container">
                                    <span>${fullName}<br><br>______________________________________<br>
            <div style="display: flex; justify-content: space-between;">
                <span>By:</span>
            </div><br>Its: ${title}</span>
                                 </div><br>`;
                    } else {
                        alert("Please select either an 'Individual' or 'NonIndividual' entity type.");
                        return;
                    }

                    // Get the active iframe and its document
                    const activeIframe = document.querySelector('iframe.active');
                    if (!activeIframe) return; // Exit if no active iframe is found

                    // Check if the iframe is frozen
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    const iframeDoc = activeIframe.contentDocument || activeIframe.contentWindow.document;
                    const iframeSelection = iframeDoc.getSelection();

                    if (!iframeSelection.rangeCount) return; // No active selection in the iframe

                    const range = iframeSelection.getRangeAt(0);
                    range.deleteContents();

                    // Insert the formatted HTML
                    const div = iframeDoc.createElement('div');
                    div.innerHTML = formattedText;
                    range.insertNode(div);

                    // Move the cursor after the inserted text
                    range.setStartAfter(div);
                    range.setEndAfter(div);
                    iframeSelection.removeAllRanges();
                    iframeSelection.addRange(range);
                    insertHiddenEntityData();
                }

                function insertSignatureLine5() {
                    const dropdown = document.getElementById('userDataDropdown');
                    const selectedOption = dropdown.options[dropdown.selectedIndex];
                    const selectedText = selectedOption.value;

                    // Get the unique Entity ID from the selected option
                    const entityId = selectedOption.getAttribute('data-entity-id');

                    // Split the selected text into parts
                    const parts = selectedText.split('-').map(part => part.trim()).filter(part => part !== '');

                    // Identify the entityType and fullName
                    const entityType = parts[0].trim();  // Make sure to trim any extra spaces
                    const fullName = parts[1];

                    // Create a unique span ID using the entity ID
                    const spanId = `entity-${entityId}`;

                    // Identify the title and roles
                    let title = '';
                    let roles = '';
                    for (let i = 2; i < parts.length; i++) {
                        if (parts[i].startsWith("Roles:")) {
                            roles = parts[i];
                            break;
                        } else {
                            title = parts[i]; // This assumes that the last segment before roles (if present) is the title
                        }
                    }

                    // Define a base underscore line and its length
                    let underscoreLine = '______________________________________';
                    const baseUnderscoreLength = underscoreLine.length;

                    let formattedText = '';

                    if (entityType === 'Individual') {
                        // Calculate if the name length exceeds the underscore length
                        if (fullName.length > baseUnderscoreLength) {
                            const extraUnderscoresNeeded = fullName.length - baseUnderscoreLength;
                            underscoreLine += '_'.repeat(extraUnderscoresNeeded);
                        }

                        // Include the underscores and name in the formatted text
                        formattedText = `<div style="display: inline-block;" class="container">
                                    <span>${underscoreLine}<br>
            <div style="display: flex; justify-content: space-between;">
                <span>${fullName}</span>
                <span>Date</span>
            </div>
            <br>${title}
        </span>
                                 </div><br>`;
                    } else if (entityType === 'NonIndividual') {
                        formattedText = `<div style="display: inline-block;" class="container">
                                    <span>${fullName}<br><br>______________________________________<br>
            <div style="display: flex; justify-content: space-between;">
                <span>By:</span>
                <span>Date</span>
            </div><br>Its: ${title}</span>
                                 </div><br>`;
                    } else {
                        alert("Please select either an 'Individual' or 'NonIndividual' entity type.");
                        return;
                    }

                    // Get the active iframe and its document
                    const activeIframe = document.querySelector('iframe.active');
                    if (!activeIframe) return; // Exit if no active iframe is found

                    // Check if the iframe is frozen
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    const iframeDoc = activeIframe.contentDocument || activeIframe.contentWindow.document;
                    const iframeSelection = iframeDoc.getSelection();

                    if (!iframeSelection.rangeCount) return; // No active selection in the iframe

                    const range = iframeSelection.getRangeAt(0);
                    range.deleteContents();

                    // Insert the formatted HTML
                    const div = iframeDoc.createElement('div');
                    div.innerHTML = formattedText;
                    range.insertNode(div);

                    // Move the cursor after the inserted text
                    range.setStartAfter(div);
                    range.setEndAfter(div);
                    iframeSelection.removeAllRanges();
                    iframeSelection.addRange(range);
                    insertHiddenEntityData();
                }



                function insertHiddenEntityData() {
                    const dropdown = document.getElementById('userDataDropdown');
                    const selectedOption = dropdown.options[dropdown.selectedIndex];

                    // Get the unique Entity ID from the selected option
                    const entityId = selectedOption.getAttribute('data-entity-id');

                    // Retrieve the relevant content to capture for this specific entity from the dropdown option's data attributes
                    var firstName = selectedOption.getAttribute('data-firstName') || '';
                    var middleName = selectedOption.getAttribute('data-middleName') || '';
                    var lastName = selectedOption.getAttribute('data-lastName') || '';
                    var streetAddress = selectedOption.getAttribute('data-streetAddress') || '';
                    var city = selectedOption.getAttribute('data-city') || '';
                    var title = selectedOption.getAttribute('data-title') || '';
                    var email = selectedOption.getAttribute('data-email') || '';
                    var phone = selectedOption.getAttribute('data-phone') || '';
                    var entityTypeStructure = selectedOption.getAttribute('data-entityTypeStructure') || '';

                    // Create a unique ID for the hidden element using the Entity ID
                    const hiddenElementId = `hidden-entity-${entityId}`;

                    // Prepare the hidden data as a string
                    const hiddenContent = `
                <div id="${hiddenElementId}" style="display: none;">
                    <p>Entity ID: ${entityId}</p>
                    <p>First Name: ${firstName}</p>
                    <p>Middle Name: ${middleName}</p>
                    <p>Last Name: ${lastName}</p>
                    <p>Street Address: ${streetAddress}</p>
                    <p>City: ${city}</p>
                    <p>Title: ${title}</p>
                    <p>Email: ${email}</p>
                    <p>Phone: ${phone}</p>
                    <p>Entity Type Structure: ${entityTypeStructure}</p>
                </div>
            `;

                    // Get the active iframe and its document
                    const activeIframe = document.querySelector('iframe.active');
                    if (!activeIframe) return; // Exit if no active iframe is found

                    const iframeDoc = activeIframe.contentDocument || activeIframe.contentWindow.document;
                    const iframeSelection = iframeDoc.getSelection();

                    if (!iframeSelection.rangeCount) return; // No active selection in the iframe

                    const range = iframeSelection.getRangeAt(0);
                    range.deleteContents();

                    // Create the hidden element and insert it at the cursor's position
                    const div = iframeDoc.createElement('div');
                    div.innerHTML = hiddenContent;
                    range.insertNode(div);

                    // Move the cursor after the inserted hidden element
                    range.setStartAfter(div);
                    range.setEndAfter(div);
                    iframeSelection.removeAllRanges();
                    iframeSelection.addRange(range);
                }




                document.getElementById('editContactButton').addEventListener('click', function () {
                    const dropdown = document.getElementById('userDataDropdown');
                    const selectedOption = dropdown.options[dropdown.selectedIndex];

                    if (!selectedOption || !selectedOption.value) {
                        alert('Please select a contact from the dropdown.');
                        return;
                    }

                    // Set the editing entity ID
                    dropdown.setAttribute("data-editing-entity-id", selectedOption.getAttribute("data-entity-id"));

                    // Populate the form fields with the selected contact's data
                    document.getElementById('firstName').value = selectedOption.getAttribute("data-firstname") || '';
                    document.getElementById('middleName').value = selectedOption.getAttribute("data-middlename") || '';
                    document.getElementById('lastName').value = selectedOption.getAttribute("data-lastname") || '';
                    document.getElementById('title').value = selectedOption.getAttribute("data-title") || '';
                    document.getElementById('streetAddress').value = selectedOption.getAttribute("data-streetaddress") || '';
                    document.getElementById('city').value = selectedOption.getAttribute("data-city") || '';
                    document.getElementById('phone').value = selectedOption.getAttribute("data-phone") || '';
                    document.getElementById('email').value = selectedOption.getAttribute("data-email") || '';
                    document.getElementById('entityTypeStructure').value = selectedOption.getAttribute("data-entitytypestructure") || '';

                    // Set roles and checkboxes
                    const roles = selectedOption.getAttribute("data-roles") || '';
                    ['checkboxBorrower', 'checkboxGuarantor', 'checkboxHypothecator', 'checkboxSigner'].forEach(id => {
                        document.getElementById(id).checked = roles.includes(document.getElementById(id).value);
                    });

                    // Set the entity type radio button
                    document.querySelector(`input[name="entityType"][value="${selectedOption.getAttribute("data-entity-type")}"]`).checked = true;
                });





                document.getElementById('deleteEntityButton').addEventListener('click', function () {
                    const dropdown = document.getElementById('userDataDropdown');
                    const selectedOption = dropdown.options[dropdown.selectedIndex];

                    if (!selectedOption || !selectedOption.value) {
                        alert('Please select a contact from the dropdown.');
                        return;
                    }

                    // Confirm deletion
                    const confirmDelete = confirm(`Are you sure you want to delete the selected entity: ${selectedOption.text}?`);
                    if (confirmDelete) {
                        // Remove the selected option from the dropdown
                        dropdown.remove(dropdown.selectedIndex);

                        // Optionally, clear the form fields or take any other necessary actions after deletion
                        clearFormFields();
                    }
                });





                function insertSignatureLine2() {
                    const individualRadio = document.getElementById('individualRadio').checked;
                    const nonIndividualRadio = document.getElementById('nonIndividualRadio').checked;

                    // Get the text values
                    const firstName = document.getElementById('firstName').value || '';
                    const middleName = document.getElementById('middleName').value || '';
                    const lastName = document.getElementById('lastName').value || '';
                    const title = document.getElementById('title').value || '';

                    // Define a base underscore line and its length
                    let underscoreLine = '______________________________________';
                    const baseUnderscoreLength = underscoreLine.length;

                    // Format the text based on radio selection
                    let formattedText = '';

                    if (individualRadio) {
                        const fullName = [firstName, middleName, lastName].filter(name => name).join(' ');

                        // Calculate if the name length exceeds the underscore length
                        if (fullName.length > baseUnderscoreLength) {
                            // Add more underscores if the full name is longer
                            const extraUnderscoresNeeded = fullName.length - baseUnderscoreLength;
                            underscoreLine += '_'.repeat(extraUnderscoresNeeded);
                        }

                        // Include the underscores and name in the formatted text
                        formattedText = `<div style="display: inline-block;" class="container">
                                    <span>${underscoreLine}<br>${fullName}<br>${title}</span>
                                 </div><br>`;
                    } else if (nonIndividualRadio) {
                        formattedText = `<div style="display: inline-block;" class="container">
                                    <span>${firstName}<br><br>______________________________________<br>By: <br>Its: </span>
                                 </div><br>`;
                    } else {
                        alert("Please select either 'Individual' or 'NonIndividual'.");
                        return;
                    }

                    // Insert the formatted text into the active iframe
                    const activeIframe = document.querySelector('iframe.active');
                    if (!activeIframe) return; // Exit if no active iframe is found

                    // Check if the iframe is frozen
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    const iframeDoc = activeIframe.contentDocument || activeIframe.contentWindow.document;
                    const iframeSelection = iframeDoc.getSelection();

                    if (!iframeSelection.rangeCount) return; // No active selection in the iframe

                    const range = iframeSelection.getRangeAt(0);
                    range.deleteContents();

                    // Insert the formatted HTML
                    const div = iframeDoc.createElement('div');
                    div.innerHTML = formattedText;
                    range.insertNode(div);

                    // Move the cursor after the inserted text
                    range.setStartAfter(div);
                    range.setEndAfter(div);
                    iframeSelection.removeAllRanges();
                    iframeSelection.addRange(range);
                }

                function insertSignatureLine4() {
                    const individualRadio = document.getElementById('individualRadio').checked;
                    const nonIndividualRadio = document.getElementById('nonIndividualRadio').checked;

                    // Get the text values
                    const firstName = document.getElementById('firstName').value || '';
                    const middleName = document.getElementById('middleName').value || '';
                    const lastName = document.getElementById('lastName').value || '';
                    const title = document.getElementById('title').value || '';

                    // Define a base underscore line and its length
                    let underscoreLine = '______________________________________';
                    const baseUnderscoreLength = underscoreLine.length;

                    // Format the text based on radio selection
                    let formattedText = '';

                    if (individualRadio) {
                        const fullName = [firstName, middleName, lastName].filter(name => name).join(' ');

                        // Calculate if the name length exceeds the underscore length
                        if (fullName.length > baseUnderscoreLength) {
                            // Add more underscores if the full name is longer
                            const extraUnderscoresNeeded = fullName.length - baseUnderscoreLength;
                            underscoreLine += '_'.repeat(extraUnderscoresNeeded);
                        }

                        // Include the underscores and name in the formatted text
                        formattedText = `<div style="display: inline-block;" class="container">
                                    <span>${underscoreLine}<br>
            <div style="display: flex; justify-content: space-between;">
                <span>${fullName}</span>
                <span>Date</span>
            </div>
            <br>${title}
        </span>

                                 </div><br>`;
                    } else if (nonIndividualRadio) {
                        formattedText = `<div style="display: inline-block;" class="container">
                                    <span>${firstName}<br><br>______________________________________<br>
            <div style="display: flex; justify-content: space-between;">
                <span>By:</span>
                <span>Date</span>
            </div><br>Its: </span>
                                 </div><br>`;
                    } else {
                        alert("Please select either 'Individual' or 'NonIndividual'.");
                        return;
                    }

                    // Insert the formatted text into the active iframe
                    const activeIframe = document.querySelector('iframe.active');
                    if (!activeIframe) return; // Exit if no active iframe is found

                    // Check if the iframe is frozen
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    const iframeDoc = activeIframe.contentDocument || activeIframe.contentWindow.document;
                    const iframeSelection = iframeDoc.getSelection();

                    if (!iframeSelection.rangeCount) return; // No active selection in the iframe

                    const range = iframeSelection.getRangeAt(0);
                    range.deleteContents();

                    // Insert the formatted HTML
                    const div = iframeDoc.createElement('div');
                    div.innerHTML = formattedText;
                    range.insertNode(div);

                    // Move the cursor after the inserted text
                    range.setStartAfter(div);
                    range.setEndAfter(div);
                    iframeSelection.removeAllRanges();
                    iframeSelection.addRange(range);
                }


                document.addEventListener('DOMContentLoaded', function () {
                    // Get radio buttons
                    const individualRadio = document.getElementById('individualRadio');
                    const nonIndividualRadio = document.getElementById('nonIndividualRadio');

                    // Get form fields
                    const firstName = document.getElementById('firstName');
                    const middleName = document.getElementById('middleName');
                    const lastName = document.getElementById('lastName');
                    const title = document.getElementById('title');
                    const entityTypeStructure = document.getElementById('entityTypeStructure');
                    const streetAddress = document.getElementById('streetAddress');
                    const city = document.getElementById('city');
                    const phone = document.getElementById('phone');
                    const email = document.getElementById('email');

                    // Initial hide all fields
                    hideAllFields();

                    // Add event listeners for the radio buttons
                    individualRadio.addEventListener('change', function () {
                        if (individualRadio.checked) {
                            // Show fields for Individual
                            showIndividualFields();
                        }
                    });

                    nonIndividualRadio.addEventListener('change', function () {
                        if (nonIndividualRadio.checked) {
                            // Show fields for Non-Individual
                            showNonIndividualFields();
                        }
                    });

                    function hideAllFields() {
                        firstName.style.display = 'none';
                        middleName.style.display = 'none';
                        lastName.style.display = 'none';
                        title.style.display = 'none';
                        entityTypeStructure.style.display = 'none';
                        streetAddress.style.display = 'none';
                        city.style.display = 'none';
                        phone.style.display = 'none';
                        email.style.display = 'none';
                    }

                    function showIndividualFields() {
                        hideAllFields();
                        firstName.style.display = 'inline-block';
                        middleName.style.display = 'inline-block';
                        lastName.style.display = 'inline-block';
                        title.style.display = 'inline-block';
                        streetAddress.style.display = 'inline-block';
                        city.style.display = 'inline-block';
                        phone.style.display = 'inline-block';
                        email.style.display = 'inline-block';
                    }

                    function showNonIndividualFields() {
                        hideAllFields();
                        firstName.style.display = 'inline-block';
                        title.style.display = 'inline-block';
                        entityTypeStructure.style.display = 'inline-block';
                        streetAddress.style.display = 'inline-block';
                        city.style.display = 'inline-block';
                        phone.style.display = 'inline-block';
                        email.style.display = 'inline-block';
                    }
                });




                function insertEntityTextFromDropdown() {
                    const dropdown = document.getElementById('userDataDropdown');
                    const selectedText = dropdown.options[dropdown.selectedIndex].value;

                    // Split the selected text into parts
                    const parts = selectedText.split('-').map(part => part.trim()).filter(part => part !== '');

                    // Dynamically build the formatted text with line breaks
                    let formattedText = '';
                    for (let i = 0; i < parts.length; i++) {
                        formattedText += parts[i];

                        // Add a line break after the name and street address
                        if (i < parts.length - 1) { // Add line break after each part except the last one
                            formattedText += "<br>";
                        }
                    }

                    // Get the active iframe and its document
                    const activeIframe = document.querySelector('iframe.active');
                    if (!activeIframe) return; // Exit if no active iframe is found

                    // Check if the iframe is frozen
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    const iframeDoc = activeIframe.contentDocument || activeIframe.contentWindow.document;
                    const iframeSelection = iframeDoc.getSelection();

                    if (!iframeSelection.rangeCount) return; // No active selection in the iframe

                    const range = iframeSelection.getRangeAt(0);
                    range.deleteContents();

                    // Insert the formatted HTML
                    const div = iframeDoc.createElement('div');
                    div.innerHTML = formattedText;
                    range.insertNode(div);

                    // Move the cursor after the inserted text
                    range.setStartAfter(div);
                    range.setEndAfter(div);
                    iframeSelection.removeAllRanges();
                    iframeSelection.addRange(range);
                }

                function saveFileContent(fileName, fileID) {
                    const iframe = document.querySelector(`.editor[data-filename="${fileName}"]`);
                    if (!iframe) {
                        console.error('Iframe not found for', fileName);
                        return;
                    }

                    const doctype = "<!DOCTYPE html>\n";
                    const content = iframe.contentWindow.document.documentElement.outerHTML;
                    const fullContent = doctype + content;
                    const blob = new Blob([fullContent], { type: 'text/html' });
                    const url = URL.createObjectURL(blob);

                    const downloadLink = document.createElement('a');
                    downloadLink.href = url;
                    downloadLink.download = `${fileID}`;
                    document.body.appendChild(downloadLink);
                    downloadLink.click();
                    document.body.removeChild(downloadLink);
                    URL.revokeObjectURL(url);
                }


                function printPreviewAll() {
                    const editors = document.querySelectorAll('.editor');
                    let printWindow = window.open('', '_blank');

                    printWindow.document.open();
                    printWindow.document.write('<html><head><title>Print Preview</title>');

                    // Copy over any styles or links from the first iframe's head section as an example
                    if (editors.length > 0) {
                        const headContent = editors[0].contentWindow.document.head.innerHTML;
                        printWindow.document.write(headContent);
                    }

                    printWindow.document.write('<style>.page-break { page-break-after: always; }</style></head><body>');

                    editors.forEach(editor => {
                        if (editor.contentWindow.document.readyState === 'complete') {
                            const editorDocument = editor.contentWindow.document.documentElement.outerHTML;
                            printWindow.document.write(`<div class="page-break">${editorDocument}</div>`);
                        }
                    });

                    printWindow.document.write('</body></html>');
                    printWindow.document.close();
                    setTimeout(() => printWindow.print(), 0);
                }

                document.getElementById('boldButton').addEventListener('click', () => {
                    applyStyleToSelectedText('bold');
                });

                document.getElementById('underlineButton').addEventListener('click', () => {
                    applyStyleToSelectedText('underline');
                });

                document.getElementById('italicButton').addEventListener('click', () => {
                    applyStyleToSelectedText('italic');
                });

                document.getElementById('justifyLeftButton').addEventListener('click', () => {
                    applyStyleToSelectedText('justifyLeft');
                });

                document.getElementById('justifyRightButton').addEventListener('click', () => {
                    applyStyleToSelectedText('justifyRight');
                });


                document.getElementById('fontSizeSelector').addEventListener('change', function () {
                    const selectedFontSize = this.value;
                    applyStyleToSelectedText('fontSize', selectedFontSize);
                });

                function applyStyleToSelectedText(styleCommand, value = null) {
                    const iframe = document.querySelector('iframe.active'); // Adjust the selector as needed
                    if (iframe) {
                        iframe.contentWindow.document.execCommand(styleCommand, false, value);
                    } else {
                        alert('Please focus on the text inside an iframe before applying style.');
                    }
                }



                function getNodeText(node) {
                    let text = "";
                    if (node.nodeType === Node.TEXT_NODE) {
                        text = node.nodeValue;
                    } else if (node.nodeType === Node.ELEMENT_NODE) {
                        text = node.innerText || node.textContent;
                    }

                    if (text.length > 50) {
                        text = text.substring(0, 500) + "...";
                    }
                    return text;
                }

                let debounceTimer;
                function trackChange(filename, changeDescription) {
                    console.log("Logging change by: ", lastSuccessfulUserValue);
                    clearTimeout(debounceTimer);
                    debounceTimer = setTimeout(() => {
                        changeCounter++;
                        const changeDate = new Date().toLocaleString();
                        const listItem = document.createElement('li');
                        listItem.textContent = `Change ${changeCounter} in ${filename} - ${changeDescription} by ${lastSuccessfulUserValue} on ${changeDate}.`;
                        listItem.title = changeDescription; // Full change description as hover text
                        document.getElementById('changeList').appendChild(listItem);
                    }, 500);
                }



                document.getElementById('reviewContent').addEventListener('click', function () {
                    var activeIframe = document.querySelector('iframe.active');
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    var iframe = document.querySelector('iframe.active').contentWindow;
                    var selection = iframe.getSelection();

                    if (selection.rangeCount > 0) {
                        var range = selection.getRangeAt(0);

                        // Create a unique identifier for this instance of highlighted text
                        var uniqueId = 'highlightedText-' + Date.now();

                        // Create and style the span element for the selected text
                        var span = iframe.document.createElement('span');
                        span.setAttribute('data-highlight-id', uniqueId);
                        span.style.backgroundColor = 'yellow';
                        span.textContent = range.toString();

                        // Replace the selected range with the new span
                        range.deleteContents();
                        range.insertNode(span);

                        // Create the acknowledge button with an inline event for simplicity
                        var acknowledgeButton = iframe.document.createElement('button');
                        acknowledgeButton.textContent = '🚨';
                        acknowledgeButton.setAttribute('onclick', `acknowledgeReview(this, '${uniqueId}')`);
                        span.parentNode.insertBefore(acknowledgeButton, span.nextSibling);
                    }
                });



                document.addEventListener("DOMContentLoaded", function () {
                    var coll = document.getElementsByClassName("collapsible-button");
                    for (var i = 0; i < coll.length; i++) {
                        coll[i].addEventListener("click", function () {
                            this.classList.toggle("active");
                            var content = this.nextElementSibling;
                            if (content.style.maxHeight) {
                                content.style.maxHeight = null;
                            } else {
                                content.style.maxHeight = content.scrollHeight + "px";
                            }
                        });
                    }
                });






                document.getElementById('insertCheckboxOptionsBtn').addEventListener('click', function () {
                    var activeIframe = document.querySelector('iframe.active');
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }
                    var iframe = document.querySelector('iframe.active').contentWindow;
                    var selection = iframe.getSelection();
                    var doc = iframe.document;
                    var uniqueId = Date.now(); // Generate a unique ID based on the current timestamp

                    // Create a new container for the checkbox options with a unique ID
                    var container = doc.createElement('div');
                    container.id = 'checkboxOptionsContainer-' + uniqueId;

                    // Adjusted for unique container ID and avoiding inline event handlers
                    var htmlContent = `
                <div class="optionsList"></div> <!-- Options will be added here -->
                <div data-container-id="${container.id}" class="addOptioncheckbox">+</div>
                <button data-container-id="${container.id}" class="finalizeOptionscheckbox">Finalize</button>
                <button data-container-id="${container.id}" class="selectCheckbox">Select</button>
            `;

                    container.innerHTML = htmlContent;

                    // Insert the new container at the current selection in the iframe document
                    if (selection.rangeCount > 0) {
                        var range = selection.getRangeAt(0);
                        range.insertNode(container);
                    }
                });


                document.getElementById('insertCheckboxBtn').addEventListener('click', function () {
                    var activeIframe = document.querySelector('iframe.active');
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    var iframe = activeIframe.contentWindow;
                    var selection = iframe.getSelection();
                    var doc = iframe.document;
                    var uniqueId = Date.now(); // Generate a unique ID based on the current timestamp

                    // Create a new container for the checkbox with a unique ID
                    var container = doc.createElement('div');
                    container.id = 'checkboxContainer-' + uniqueId;

                    // Insert a checkbox and label into the container
                    var checkboxHtml = `
                <input type="checkbox" id="checkbox-${uniqueId}">
                <label for="checkbox-${uniqueId}">Check me</label>
            `;

                    container.innerHTML = checkboxHtml;

                    // Insert the new container at the current selection in the iframe document
                    if (selection.rangeCount > 0) {
                        var range = selection.getRangeAt(0);
                        range.insertNode(container);
                    }
                });




                document.getElementById('indentContent').addEventListener('click', function () {
                    var activeIframe = document.querySelector('iframe.active');
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    var iframe = activeIframe.contentWindow;
                    var selection = iframe.getSelection();
                    var doc = iframe.document;

                    // Check if there is a selection
                    if (selection.rangeCount > 0) {
                        var range = selection.getRangeAt(0);

                        // Extract the highlighted content
                        var fragment = range.extractContents();

                        // Prepend non-breaking spaces to the selected content
                        var indentSpan = doc.createElement('span');
                        indentSpan.innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + fragment.textContent; // 5 spaces
                        indentSpan.style.whiteSpace = "pre"; // Preserve spacing

                        // Replace the original range with the indented content
                        range.deleteContents(); // Remove the original content
                        range.insertNode(indentSpan);

                        // Clear the current selection to avoid unexpected behavior
                        selection.removeAllRanges();

                        // Set cursor after the indented content
                        var cursorRange = doc.createRange();
                        cursorRange.setStartAfter(indentSpan);
                        cursorRange.collapse(true);
                        selection.addRange(cursorRange);
                    }
                });





                document.getElementById('businessSignature').addEventListener('click', function () {
                    // Define the content for the pop-up window
                    const popupContent = `
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Signature Lines</title>
                <style>
                    .signature-controls {
                        margin-bottom: 20px;
                    }
                    #signerContainer div {
                        margin-bottom: 10px;
                    }
                </style>
            </head>
            <body>
                <div class="container">Test Content</div>
                <button id="addSignerBtn">+</button>
                <button id="toggleDateBtn">Toggle Date</button>
                <button id="confirmBtn">Confirm</button><br><br>
                <input list="businessNameOptions" id="businessNameInput" placeholder="Business Name">
                <datalist id="businessNameOptions">
                    <!-- This will be populated dynamically with options -->
                </datalist>



                <div id="signerContainer"></div>

        <script>
                    document.addEventListener('DOMContentLoaded', function() {
                        let isDateVisible = true;

            const businessNameOptions = document.getElementById('businessNameOptions');

            // Read options from the parent dropdown
            const parentDropdownOptions = window.opener.document.querySelectorAll('#userDataDropdown option');

            parentDropdownOptions.forEach(option => {
                // Assuming the dropdown value contains "EntityType - FirstName MiddleName LastName"
                // We split by ' - ' and take the portion after the entity type
                const nameParts = option.value.split(' - ');
                const nameContent = nameParts[1]; // Extract only the first name portion after the first ' - '


                // Create a new option with only the name content
                const newOption = document.createElement('option');
                newOption.value = nameContent;
                newOption.textContent = nameContent;

                // Add the new option to the datalist
                businessNameOptions.appendChild(newOption);
            });





                        document.getElementById('addSignerBtn').addEventListener('click', function() {
                            addNewSignerLine();
                        });
                        document.getElementById('toggleDateBtn').addEventListener('click', function() {
                            isDateVisible = !isDateVisible;
                            toggleDateText(isDateVisible);
                        });
                        document.getElementById('confirmBtn').addEventListener('click', function() {
                            confirmInputs();
                        });




                        function addNewSignerLine(parentId = null, indentationLevel = 0, insertAfterElement = null, addPlusButton = false) {
                            const signerContainer = document.getElementById('signerContainer');
                            const newSignerNum = signerContainer.children.length + 1;
                            const newSignerWrapper = document.createElement('div');
                            newSignerWrapper.id = \`signer\${newSignerNum}Wrapper\`;
                            newSignerWrapper.dataset.indentationLevel = indentationLevel;
                            newSignerWrapper.dataset.parentId = parentId;
                            newSignerWrapper.style.marginLeft = \`\${indentationLevel * 40}px\`;
                            newSignerWrapper.innerHTML = \`
                                <div><br></div>
                                <div>______________________________________</div>
                                <div>By:&nbsp;<input type="text" id="Signer\${newSignerNum}" list="businessNameOptions" placeholder="Signer full name or business name">&nbsp; &nbsp; &nbsp; <span class="dateText">\${isDateVisible ? 'Date:' : ''}</span>
                                    \${addPlusButton ? \`<button id="addSiblingBtn\${newSignerNum}">+</button>\` : ''}
                                </div>
                                <div>Its:&nbsp;&nbsp;<input type="text" id="signertitle\${newSignerNum}" placeholder="title"></div>
                                <label>
                                    <input type="radio" name="entityType\${newSignerNum}" value="Individual" id="individualRadio\${newSignerNum}"> Individual
                                </label>
                                <label style="margin-left: 20px;">
                                    <input type="radio" name="entityType\${newSignerNum}" value="NonIndividual" id="nonIndividualRadio\${newSignerNum}"> NonIndividual
                                </label>
                                <button id="removeSignerBtn\${newSignerNum}" style="margin-left: 10px;">-</button>
                            \`;
                            if (insertAfterElement) {
                                insertAfterElement.insertAdjacentElement('afterend', newSignerWrapper);
                            } else {
                                signerContainer.appendChild(newSignerWrapper);
                            }
                            const individualRadio = document.getElementById(\`individualRadio\${newSignerNum}\`);
                            const nonIndividualRadio = document.getElementById(\`nonIndividualRadio\${newSignerNum}\`);
                            const removeSignerBtn = document.getElementById(\`removeSignerBtn\${newSignerNum}\`);
                            individualRadio.addEventListener('change', function() {
                                handleRadioChange(newSignerNum, 'Individual', indentationLevel);
                            });
                            nonIndividualRadio.addEventListener('change', function() {
                                handleRadioChange(newSignerNum, 'Non-Individual', indentationLevel);
                            });
                            if (addPlusButton) {
                                const addSiblingBtn = document.getElementById(\`addSiblingBtn\${newSignerNum}\`);
                                addSiblingBtn.addEventListener('click', function() {
                                    const correctPosition = findCorrectPosition(newSignerWrapper, indentationLevel);
                                    addNewSignerLine(null, indentationLevel, correctPosition, false);
                                });
                            }
                            removeSignerBtn.addEventListener('click', function() {
                                removeChildSigners(newSignerNum, indentationLevel);
                                newSignerWrapper.remove();
                            });
                            adjustInputWidth(document.getElementById(\`Signer\${newSignerNum}\`));
                            adjustInputWidth(document.getElementById(\`signertitle\${newSignerNum}\`));
                        }

                        function handleRadioChange(signerNum, entityType, currentIndentationLevel) {
                            const signerWrapper = document.getElementById(\`signer\${signerNum}Wrapper\`);
                            const nextSibling = signerWrapper.nextElementSibling;
                            if (entityType === 'Non-Individual') {
                                const newIndentationLevel = currentIndentationLevel + 1;
                                const addPlusButton = !nextSibling || parseInt(nextSibling.dataset.indentationLevel) <= currentIndentationLevel;
                                addNewSignerLine(signerNum, newIndentationLevel, signerWrapper, addPlusButton);
                            }
                            if (entityType === 'Individual') {
                                removeChildSigners(signerNum, currentIndentationLevel);
                            }
                        }
                        function removeChildSigners(parentSignerNum, parentIndentationLevel) {
                            const signerContainer = document.getElementById('signerContainer');
                            let nextSibling = document.getElementById(\`signer\${parentSignerNum}Wrapper\`).nextElementSibling;
                            while (nextSibling && parseInt(nextSibling.dataset.indentationLevel) > parentIndentationLevel) {
                                const nextToRemove = nextSibling;
                                nextSibling = nextSibling.nextElementSibling;
                                nextToRemove.remove();
                            }
                        }
                        function findCorrectPosition(startElement, indentationLevel) {
                            let currentElement = startElement;
                            while (currentElement.nextElementSibling && parseInt(currentElement.nextElementSibling.dataset.indentationLevel) > indentationLevel) {
                                currentElement = currentElement.nextElementSibling;
                            }
                            return currentElement;
                        }
                        function toggleDateText(isVisible) {
                            const dateElements = document.querySelectorAll('.dateText');
                            dateElements.forEach(function(element) {
                                element.textContent = isVisible ? 'Date:' : '';
                            });
                        }
                        function adjustInputWidth(inputElement) {
                            const tempSpan = document.createElement('span');
                            tempSpan.style.visibility = 'hidden';
                            tempSpan.style.position = 'absolute';
                            tempSpan.style.whiteSpace = 'nowrap';
                            tempSpan.style.fontSize = window.getComputedStyle(inputElement).fontSize;
                            tempSpan.style.fontFamily = window.getComputedStyle(inputElement).fontFamily;
                            tempSpan.textContent = inputElement.value || inputElement.placeholder;
                            document.body.appendChild(tempSpan);
                            const inputWidth = tempSpan.offsetWidth + 20;
                            inputElement.style.width = inputWidth + 'px';
                            document.body.removeChild(tempSpan);
                        }



        function confirmInputs() {
            const businessNameInput = document.getElementById('businessNameInput');  // Using updated input ID
            let confirmedContent = '';

            // Capture the business name with proper formatting
            if (businessNameInput) {
                const businessNameSpan = document.createElement('span');
                businessNameSpan.textContent = businessNameInput.value || businessNameInput.placeholder;
                businessNameInput.replaceWith(businessNameSpan);

                // Add the business name to confirmed content with a <strong> tag for emphasis
                confirmedContent += '<div>' + businessNameSpan.textContent + '</div>';
            }

            // Capture the signature lines while maintaining their structure and formatting
            const signatureBlocks = document.querySelectorAll('#signerContainer > div');
            signatureBlocks.forEach(block => {
                const clonedBlock = block.cloneNode(true);
                const inputs = clonedBlock.querySelectorAll('input[type="text"]');
                inputs.forEach(input => {
                    const span = document.createElement('span');
                    span.textContent = input.value || input.placeholder;
                    input.replaceWith(span);  // Replace input field with plain text
                });


                // Remove unnecessary buttons and radio buttons within the block
                const elementsToRemove = clonedBlock.querySelectorAll('input[type="radio"], button, label');
                elementsToRemove.forEach(element => {
                    element.parentElement.removeChild(element); // Remove each button/radio/label
                });

                // Append the cleaned-up block to the confirmed content
                confirmedContent += '<div style="margin-left: ' + clonedBlock.style.marginLeft + ';">' + clonedBlock.innerHTML + '</div>';
            });

            // Call insertSignatureLineFromPopup to insert the confirmed content into the parent iframe
            window.opener.insertSignatureLineFromPopup(confirmedContent);

            // Optional: Close the pop-up after confirming
            window.close();
        }

        // Adjust input widths dynamically
        document.getElementById('signerContainer').addEventListener('input', function(event) {
            if (event.target.tagName === 'INPUT' && (event.target.id.startsWith('Signer') || event.target.id.startsWith('signertitle'))) {
                adjustInputWidth(event.target);
            }
        });

        document.querySelectorAll('#signerContainer input').forEach(function(inputElement) {
            adjustInputWidth(inputElement);
        });


        });




                <\/script>

            </body>
            </html>
            `;

                    // Open the popup window with the specified dimensions
                    const popupWindow = window.open('', '_blank', 'width=800,height=600');

                    // Write the content into the popup window
                    popupWindow.document.write(popupContent);
                    popupWindow.document.close();
                });


                function insertSignatureLineFromPopup(confirmedContent) {
                    const activeIframe = document.querySelector('iframe.active');
                    if (!activeIframe) {
                        console.error("No active iframe found.");
                        return;
                    }

                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    const iframeDoc = activeIframe.contentDocument || activeIframe.contentWindow.document;
                    const iframeSelection = iframeDoc.getSelection();
                    if (!iframeSelection.rangeCount) {
                        console.error("No range found in the iframe selection.");
                        return;
                    }

                    // Generate a six-digit random number
                    const randomSixDigit = Math.floor(100000 + Math.random() * 900000);

                    // Extract the first name from the confirmed content (from the first <div>)
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = confirmedContent;
                    const firstDiv = tempDiv.querySelector('div');
                    let firstName = "signature";  // Fallback in case no name is found

                    if (firstDiv) {
                        firstName = firstDiv.textContent.trim().replace(/\s+/g, '').substring(0, 10);  // Use the first name, trim spaces, and limit to 10 characters
                    }

                    // Create a unique ID that includes the first name and a six-digit number
                    const uniqueID = firstName + randomSixDigit;

                    const range = iframeSelection.getRangeAt(0);
                    range.deleteContents();

                    // Create a span to wrap the confirmed content and give it a unique ID
                    const textSpan = iframeDoc.createElement('span');
                    textSpan.id = uniqueID; // Set the unique ID with the first name and the six-digit number
                    textSpan.classList.add('signature'); // Add the "signature" class
                    textSpan.innerHTML = confirmedContent;  // Insert the confirmed content

                    range.insertNode(textSpan);

                    // Move the cursor after the inserted content
                    range.setStartAfter(textSpan);
                    range.setEndAfter(textSpan);
                    iframeSelection.removeAllRanges();
                    iframeSelection.addRange(range);

                    // Now, add the signature line ID and label to the dropdown
                    addSignatureToDropdown(uniqueID, firstName);
                }

                function addSignatureToDropdown(spanID, label) {
                    // Reference the dropdown
                    var dropdown = document.getElementById("userDataDropdowndefault");

                    // Create a new option for the dropdown using just the span ID.
                    var newOption = document.createElement("option");
                    newOption.text = spanID + " (Signature)"; // Display only the span ID
                    newOption.value = spanID; // Value is still the span ID

                    // Add the new option to the dropdown
                    dropdown.add(newOption);
                }



                function scanEditorForSignatures(iframe) {
                    if (!iframe) return;
                    try {
                        var iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
                        // Find all signature spans in the editor (child page)
                        var signatureSpans = iframeDoc.querySelectorAll(".signature");
                        signatureSpans.forEach(function (span) {
                            var spanID = span.id;
                            // Use a custom attribute for a friendly label if available; otherwise, use the trimmed text
                            var label = span.getAttribute("data-signature-label") || span.textContent.trim();
                            if (spanID) {
                                // Check if the dropdown already contains an option with this signature ID
                                var dropdown = document.getElementById("userDataDropdowndefault");
                                if (dropdown) {
                                    var exists = false;
                                    for (var i = 0; i < dropdown.options.length; i++) {
                                        if (dropdown.options[i].value === spanID) {
                                            exists = true;
                                            break;
                                        }
                                    }
                                    if (!exists) {
                                        addSignatureToDropdown(spanID, label);
                                    }
                                }
                            }
                        });
                    } catch (e) {
                        console.error("Error scanning editor for signatures:", e);
                    }
                }



                function validateCode(event, element) {
                    var correctCode = "123456"; // The correct code
                    var userCode = prompt("Please enter the 6-digit code:");

                    if (userCode === correctCode) {

                        // Check if the element is a checkbox
                        if (element.type === "checkbox") {
                            // Run the checkbox-specific logic
                            handleCheckbox(event); // Call your existing function for checkboxes
                        } else {
                            // For buttons or other elements, toggle padlock text
                            togglePadlockText(element);
                        }
                    } else {
                        alert("Incorrect code");
                        event.preventDefault(); // Prevent default actions
                        event.stopImmediatePropagation(); // Stop further event handling
                    }
                }




                function togglePadlockText(button) {
                    var content = button.nextElementSibling.nextElementSibling; // Get the collapsible content
                    var padlock = button.nextElementSibling; // Get the padlock span next to the button

                    if (content.style.maxHeight) {
                        // If content is expanded, collapse it and set padlock to locked
                        content.style.maxHeight = null;
                        padlock.textContent = '🔒';  // Change the text to the locked padlock
                    } else {
                        // If content is collapsed, expand it and set padlock to unlocked
                        content.style.maxHeight = content.scrollHeight + "px";
                        padlock.textContent = '🗝️';  // Change the text to the unlocked key
                    }
                }





                document.getElementById('insertTable1x1').addEventListener('click', function () {
                    var activeIframe = document.querySelector('iframe.active');
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    var iframe = document.querySelector('iframe.active').contentWindow;
                    var selection = iframe.getSelection();
                    var doc = iframe.document;

                    // Create a container element
                    var container = doc.createElement('div');
                    container.id = 'TableContainer';

                    // Define the HTML content
                    var htmlContent = `
         <table>
            <tbody>
            <tr>
                <td> 1</td>
            </tr>
        </tbody></table>
            `;

                    // Append the HTML to the container
                    container.innerHTML = htmlContent;

                    // Insert the container into the iframe at the current cursor position
                    if (selection.rangeCount > 0) {
                        var range = selection.getRangeAt(0);
                        range.insertNode(container);
                    }
                });

                document.getElementById('insertTable1x2').addEventListener('click', function () {
                    var activeIframe = document.querySelector('iframe.active');
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    var iframe = document.querySelector('iframe.active').contentWindow;
                    var selection = iframe.getSelection();
                    var doc = iframe.document;

                    // Create a container element
                    var container = doc.createElement('div');
                    container.id = 'TableContainer';

                    // Define the HTML content
                    var htmlContent = `
         <table>
            <tbody>
            <tr>
                <td> 1</td>
                <td>2</td>
            </tr>
        </tbody></table>
            `;

                    // Append the HTML to the container
                    container.innerHTML = htmlContent;

                    // Insert the container into the iframe at the current cursor position
                    if (selection.rangeCount > 0) {
                        var range = selection.getRangeAt(0);
                        range.insertNode(container);
                    }
                });

                document.getElementById('insertTable1x3').addEventListener('click', function () {
                    var activeIframe = document.querySelector('iframe.active');
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    var iframe = document.querySelector('iframe.active').contentWindow;
                    var selection = iframe.getSelection();
                    var doc = iframe.document;

                    // Create a container element
                    var container = doc.createElement('div');
                    container.id = 'TableContainer';

                    // Define the HTML content
                    var htmlContent = `
         <table>
            <tbody>
            <tr>
                <td> 1</td>
                <td>2</td>
                <td>3</td>
            </tr>
        </tbody></table>
            `;

                    // Append the HTML to the container
                    container.innerHTML = htmlContent;

                    // Insert the container into the iframe at the current cursor position
                    if (selection.rangeCount > 0) {
                        var range = selection.getRangeAt(0);
                        range.insertNode(container);
                    }
                });

                document.getElementById('insertTable1x4').addEventListener('click', function () {
                    var activeIframe = document.querySelector('iframe.active');
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    var iframe = document.querySelector('iframe.active').contentWindow;
                    var selection = iframe.getSelection();
                    var doc = iframe.document;

                    // Create a container element
                    var container = doc.createElement('div');
                    container.id = 'TableContainer';

                    // Define the HTML content
                    var htmlContent = `
         <table>
            <tbody>
            <tr>
                <td> 1</td>
                <td>2</td>
                <td>3</td>
                <td>4</td>
            </tr>
        </tbody></table>
            `;

                    // Append the HTML to the container
                    container.innerHTML = htmlContent;

                    // Insert the container into the iframe at the current cursor position
                    if (selection.rangeCount > 0) {
                        var range = selection.getRangeAt(0);
                        range.insertNode(container);
                    }
                });

                document.getElementById('insertTable1x5').addEventListener('click', function () {
                    var activeIframe = document.querySelector('iframe.active');
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    var iframe = document.querySelector('iframe.active').contentWindow;
                    var selection = iframe.getSelection();
                    var doc = iframe.document;

                    // Create a container element
                    var container = doc.createElement('div');
                    container.id = 'TableContainer';

                    // Define the HTML content
                    var htmlContent = `
         <table>
            <tbody>
            <tr>
                <td> 1</td>
                <td>2</td>
                <td>3</td>
                <td>4</td>
                <td>5</td>
            </tr>
        </tbody></table>
            `;

                    // Append the HTML to the container
                    container.innerHTML = htmlContent;

                    // Insert the container into the iframe at the current cursor position
                    if (selection.rangeCount > 0) {
                        var range = selection.getRangeAt(0);
                        range.insertNode(container);
                    }
                });

                document.getElementById('insertTable1x6').addEventListener('click', function () {
                    var activeIframe = document.querySelector('iframe.active');
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    var iframe = document.querySelector('iframe.active').contentWindow;
                    var selection = iframe.getSelection();
                    var doc = iframe.document;

                    // Create a container element
                    var container = doc.createElement('div');
                    container.id = 'TableContainer';

                    // Define the HTML content
                    var htmlContent = `
         <table>
            <tbody>
            <tr>
                <td> 1</td>
                <td>2</td>
                <td>3</td>
                <td>4</td>
                <td>5</td>
                <td>6</td>
            </tr>
        </tbody></table>
            `;

                    // Append the HTML to the container
                    container.innerHTML = htmlContent;

                    // Insert the container into the iframe at the current cursor position
                    if (selection.rangeCount > 0) {
                        var range = selection.getRangeAt(0);
                        range.insertNode(container);
                    }
                });

                document.getElementById('addLineButton').addEventListener('click', function () {
                    const activeIframe = document.querySelector('iframe.active');
                    if (!activeIframe) return;

                    // Check if the iframe content is frozen
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    const iframeDoc = activeIframe.contentDocument || activeIframe.contentWindow.document;
                    const selection = iframeDoc.getSelection();
                    if (!selection.rangeCount) return;

                    const range = selection.getRangeAt(0);
                    range.deleteContents();

                    const newLineDiv = iframeDoc.createElement('div');
                    newLineDiv.className = 'line';

                    range.insertNode(newLineDiv);

                    // Move the cursor after the inserted line
                    range.setStartAfter(newLineDiv);
                    range.collapse(true);
                    selection.removeAllRanges();
                    selection.addRange(range);
                });


                document.getElementById('removeBorder').addEventListener('click', function () {
                    var activeIframe = document.querySelector('iframe.active');
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    var iframe = document.querySelector('iframe.active').contentWindow;
                    var doc = iframe.document;

                    // Get the current selection
                    var selection = iframe.getSelection();

                    // Check if the selection is inside a table cell
                    if (selection.rangeCount > 0) {
                        var range = selection.getRangeAt(0);
                        var selectedNode = range.startContainer;

                        // Find the parent TD if it exists
                        while (selectedNode && selectedNode.nodeName !== 'TD') {
                            selectedNode = selectedNode.parentNode;
                        }

                        // If a TD was found, remove its borders
                        if (selectedNode) {
                            selectedNode.style.border = 'none';
                        }
                    }
                });



                function applyBorderStyle(style, position) {
                    var activeIframe = document.querySelector('iframe.active');
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    var iframe = document.querySelector('iframe.active').contentWindow;
                    var doc = iframe.document;
                    var selection = iframe.getSelection();

                    if (selection.rangeCount > 0) {
                        var range = selection.getRangeAt(0);
                        var container = range.commonAncestorContainer;

                        if (container.nodeType === Node.TEXT_NODE || container.nodeName === 'TD') {
                            var cell = container.nodeType === Node.TEXT_NODE ? container.parentNode : container;
                            applyFullOrSingleSideBorder(cell, style, position);
                        } else if (container.nodeName === 'TR' || container.nodeName === 'TABLE') {
                            var selectedCells = getSelectedCells(range);
                            if (position === 'border') {
                                selectedCells.forEach(cell => applyFullOrSingleSideBorder(cell, style, position));
                            } else {
                                var bounds = findSelectionBounds(selectedCells);
                                applyStyleToMultipleCells(bounds, selectedCells, style, position);
                            }
                        }
                    }
                }

                function applyFullOrSingleSideBorder(cell, style, position) {
                    if (position === 'border') {
                        cell.style.border = style;
                    } else {
                        cell.style[position] = style;
                    }
                }



                function applyStyleToCell(cell, style, position) {
                    // Apply style to a single cell
                    cell.style[position] = style;
                }

                function applyStyleToMultipleCells(bounds, cells, style, position) {
                    cells.forEach(cell => {
                        var row = cell.parentElement.rowIndex;
                        var col = cell.cellIndex;

                        // Apply style based on the position and bounds
                        if ((position === 'borderLeft' && col === bounds.left) ||
                            (position === 'borderRight' && col === bounds.right) ||
                            (position === 'borderTop' && row === bounds.top) ||
                            (position === 'borderBottom' && row === bounds.bottom)) {
                            cell.style[position] = style;
                        }
                    });
                }


                function getSelectedCells(range) {
                    var cells = [];
                    var commonAncestor = range.commonAncestorContainer;
                    var allCells = commonAncestor.getElementsByTagName('td');

                    for (var i = 0; i < allCells.length; i++) {
                        if (range.intersectsNode(allCells[i])) {
                            cells.push(allCells[i]);
                        }
                    }
                    return cells;
                }


                function findSelectionBounds(cells) {
                    var bounds = { left: Infinity, right: -Infinity, top: Infinity, bottom: -Infinity };
                    cells.forEach(cell => {
                        var row = cell.parentElement.rowIndex;
                        var col = cell.cellIndex;
                        bounds.left = Math.min(bounds.left, col);
                        bounds.right = Math.max(bounds.right, col);
                        bounds.top = Math.min(bounds.top, row);
                        bounds.bottom = Math.max(bounds.bottom, row);
                    });
                    return bounds;
                }

                // Event listeners
                document.getElementById('borderTop').addEventListener('click', function () {
                    applyBorderStyle('1px solid black', 'borderTop');
                });

                document.getElementById('borderRight').addEventListener('click', function () {
                    applyBorderStyle('1px solid black', 'borderRight');
                });

                document.getElementById('borderBottom').addEventListener('click', function () {
                    applyBorderStyle('1px solid black', 'borderBottom');
                });

                document.getElementById('borderLeft').addEventListener('click', function () {
                    applyBorderStyle('1px solid black', 'borderLeft');
                });

                document.getElementById('borderFull').addEventListener('click', function () {
                    applyBorderStyle('1px solid black', 'border');
                });

                document.getElementById('centerTextButton').addEventListener('click', function () {
                    var activeIframe = document.querySelector('iframe.active');
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }
                    var iframe = document.querySelector('iframe.active').contentWindow;
                    var doc = iframe.document;
                    var selection = iframe.getSelection();

                    // Check if there is a selection
                    if (!selection.rangeCount) return;

                    const range = selection.getRangeAt(0);

                    // Create a div element to wrap around the selected text
                    const div = doc.createElement('div');
                    div.style.textAlign = 'center'; // Apply center style

                    // Move the selected content to the div and insert the div into the range
                    div.appendChild(range.extractContents());
                    range.insertNode(div);

                    // Clear the selection
                    selection.removeAllRanges();
                });




                function readExcel() {
                    const excelFile = document.getElementById('excelInput').files[0];
                    const reader = new FileReader();

                    reader.onload = function (event) {
                        const data = event.target.result;
                        const workbook = XLSX.read(data, { type: 'binary' });

                        const firstSheet = workbook.SheetNames[0];
                        const worksheet = workbook.Sheets[firstSheet];

                        // Convert the first two rows to JSON
                        const sheetData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
                        if (sheetData.length >= 2) {
                            const ids = sheetData[0];
                            const values = sheetData[1];
                            window.excelData = ids.reduce((obj, key, index) => {
                                obj[key] = values[index];
                                return obj;
                            }, {});
                        } else {
                            console.error("Excel file format is not correct.");
                        }
                    };

                    reader.onerror = function (event) {
                        console.error("Error reading Excel file", event);
                    };

                    reader.readAsBinaryString(excelFile);
                }



                function updateAllIframesWithNewData() {
                    const allIframes = document.querySelectorAll('iframe.editor');

                    allIframes.forEach(iframe => {
                        // Check if the iframe content is frozen
                        if (iframe.getAttribute('data-frozen') === 'true') {
                            console.log("Skipped frozen iframe:", iframe);
                            return; // Skip this iframe and continue with the next one
                        }

                        // Access iframe's document
                        const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;

                        // Ensure excelData exists or check sessionStorage
                        if (window.excelData || sessionStorage.length > 0) {
                            const keysToCheck = window.excelData ? Object.keys(window.excelData) : [];

                            // Combine excelData keys and sessionStorage keys
                            const allKeys = new Set([
                                ...keysToCheck,
                                ...Object.keys(sessionStorage)
                            ]);

                            allKeys.forEach(key => {
                                const elements = iframeDoc.querySelectorAll('.data-element[data-key="' + key + '"]');

                                if (elements.length === 0) {
                                    console.warn(`No matching elements found for key: ${key}`);
                                }

                                elements.forEach(elem => {
                                    // Check excelData first, fallback to sessionStorage
                                    const value = window.excelData?.[key] || sessionStorage.getItem(key);

                                    if (value) {
                                        if (elem.childNodes.length === 1 && elem.childNodes[0].nodeType === Node.TEXT_NODE) {
                                            // Replace the entire content for single text nodes
                                            elem.textContent = value;
                                        } else {
                                            // Replace placeholders in complex structures
                                            elem.childNodes.forEach(child => {
                                                if (child.nodeType === Node.TEXT_NODE && child.nodeValue.trim().includes('$')) {
                                                    child.nodeValue = child.nodeValue.replace(/\$.*?\$/g, match => {
                                                        const placeholderKey = match.slice(1, -1);
                                                        return (
                                                            window.excelData?.[placeholderKey] ||
                                                            sessionStorage.getItem(placeholderKey) ||
                                                            match // Retain placeholder if no match
                                                        );
                                                    });
                                                }
                                            });
                                        }
                                    }
                                });
                            });
                        } else {
                            console.warn("No data found in excelData or sessionStorage to update iframes.");
                        }
                    });
                }



                document.getElementById('openHyperlinkPopup').addEventListener('click', function () {
                    const windowFeatures = 'width=320,height=150,left=10,top=10,resizable=yes';

                    const popupWindow = window.open('', 'popupWindow', windowFeatures);
                    popupWindow.document.write('<html><head><title>Insert Hyperlink</title>');
                    popupWindow.document.write('<style>input { width: 100%; box-sizing: border-box; }</style>');
                    popupWindow.document.write('</head><body>');
                    popupWindow.document.write('<label for="urlInput">URL:</label><br>');
                    popupWindow.document.write('<input type="text" id="urlInput" placeholder="Enter URL"><br>');
                    popupWindow.document.write('<label for="labelInput">Label:</label><br>');
                    popupWindow.document.write('<input type="text" id="labelInput" placeholder="Enter Label"><br>');
                    popupWindow.document.write('<button id="insertHyperlink">Insert Link</button>');
                    popupWindow.document.write('<script>document.getElementById("insertHyperlink").onclick = function() {');
                    popupWindow.document.write('window.opener.insertHyperlink(document.getElementById("urlInput").value, document.getElementById("labelInput").value);');
                    popupWindow.document.write('window.close();};<\/script>');
                    popupWindow.document.write('</body></html>');
                });


                function insertHyperlink(url, label) {
                    const activeIframe = document.querySelector('iframe.active');
                    if (!activeIframe) {
                        alert("No active iframe found.");
                        return; // Exit if no active iframe is found
                    }

                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    const iframeSelection = activeIframe.contentWindow.getSelection();
                    if (!iframeSelection.rangeCount) {
                        alert("No selection in the iframe.");
                        return;  // No active selection in the iframe.
                    }

                    const range = iframeSelection.getRangeAt(0);
                    range.deleteContents();

                    // Create a hyperlink element
                    const link = document.createElement('a');
                    link.setAttribute('href', url);
                    link.appendChild(document.createTextNode(label));
                    link.target = '_blank';

                    link.addEventListener('click', function (event) {
                        window.open(this.getAttribute('href'), '_blank');
                        event.preventDefault(); // Prevent the default anchor action
                    });

                    // Insert the hyperlink at the current cursor location
                    range.insertNode(link);

                    // Move the cursor after the inserted hyperlink
                    range.setStartAfter(link);
                    range.setEndAfter(link);
                    iframeSelection.removeAllRanges();
                    iframeSelection.addRange(range);
                }


                document.getElementById('openInsertDataelement').addEventListener('click', function () {
                    const windowFeatures = 'width=320,height=150,left=10,top=10,resizable=yes';

                    const popupWindow = window.open('', 'popupWindow', windowFeatures);
                    popupWindow.document.write('<html><head><title>Insert Data Element</title>');
                    popupWindow.document.write('<style>input { width: 100%; box-sizing: border-box; }</style>');
                    popupWindow.document.write('</head><body>');
                    popupWindow.document.write('<label for="elementId">Enter Element ID</label><br>');
                    popupWindow.document.write('<input type="text" id="elementId" placeholder="Enter Element ID"><br>');
                    popupWindow.document.write('<label for="label">Element Description</label><br>');
                    popupWindow.document.write('<input type="text" id="label" placeholder="Enter Label"><br>');
                    popupWindow.document.write('<button id="insertElementButton">Insert Data Element</button>');
                    popupWindow.document.write('<script>document.getElementById("insertElementButton").onclick = function() {');
                    popupWindow.document.write('window.opener.insertDataElement(document.getElementById("elementId").value, document.getElementById("label").value);');
                    popupWindow.document.write('window.close();};<\/script>');

                    popupWindow.document.write('</body></html>');
                });
                function insertDataElement(dataKey, label) {
                    const activeIframe = document.querySelector('iframe.active');
                    if (!activeIframe) return;

                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    const iframeSelection = activeIframe.contentWindow.getSelection();
                    if (!iframeSelection.rangeCount) return;

                    const range = iframeSelection.getRangeAt(0);
                    range.deleteContents();

                    const span = document.createElement('span');
                    span.classList.add('data-element');
                    span.setAttribute('data-key', dataKey);
                    span.textContent = `$${label}$`;

                    range.insertNode(span);
                    range.setStartAfter(span);
                    range.setEndAfter(span);
                    iframeSelection.removeAllRanges();
                    iframeSelection.addRange(range);
                }

                document.addEventListener('DOMContentLoaded', function () {
                    var btn = document.getElementById('openOtherPageBtn');
                    if (btn) {
                        btn.addEventListener('click', function () {
                            // Open in a new window
                            window.open('HTMLAttributeEditor.html', '_blank');
                        });
                    } else {
                        console.error("Button #openOtherPageBtn not found.");
                    }
                });





                function addToDropdowndefault() {
                    var defaultData = document.getElementById("defaultData").value;

                    if (!defaultData) {
                        alert("Please enter some text.");
                        return;
                    }

                    var optionText = defaultData;
                    var dropdown = document.getElementById("userDataDropdowndefault");

                    var newOption = document.createElement("option");
                    newOption.text = optionText;
                    newOption.value = optionText; // The value will be the entered text

                    dropdown.add(newOption);

                    // Clear the input fields after adding to the dropdown
                    document.getElementById("defaultData").value = "";
                }



                function insertDefaultTextFromDropdown() {
                    const dropdown = document.getElementById('userDataDropdowndefault');
                    const selectedText = dropdown.options[dropdown.selectedIndex].value;

                    // Get the active iframe and its selection
                    const activeIframe = document.querySelector('iframe.active');
                    if (!activeIframe) return; // Exit if no active iframe is found

                    // Check if the iframe is frozen
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    const iframeDoc = activeIframe.contentWindow.document;
                    const iframeSelection = activeIframe.contentWindow.getSelection();

                    if (!iframeSelection.rangeCount) return;  // No active selection in the iframe.

                    const range = iframeSelection.getRangeAt(0);
                    range.deleteContents();

                    // Check if it's a signature span or just plain text
                    const originalSpan = iframeDoc.getElementById(selectedText);
                    if (originalSpan) {
                        // Clone the original signature span
                        const clonedSpan = originalSpan.cloneNode(true);

                        // Generate a new unique ID by appending a random three-digit code
                        const randomThreeDigit = Math.floor(100 + Math.random() * 900); // Generate a random 3-digit number
                        const newSpanID = originalSpan.id + randomThreeDigit;
                        clonedSpan.id = newSpanID; // Assign the new unique ID

                        range.insertNode(clonedSpan);

                        // Move the cursor after the inserted content
                        range.setStartAfter(clonedSpan);
                        range.setEndAfter(clonedSpan);
                    } else {
                        // If plain text is selected, insert it as a text node
                        const textNode = document.createTextNode(selectedText);
                        range.insertNode(textNode);

                        // Move the cursor after the inserted text.
                        range.setStartAfter(textNode);
                        range.setEndAfter(textNode);
                    }

                    iframeSelection.removeAllRanges();
                    iframeSelection.addRange(range);
                }




                function readExcel2() {
                    const excelFile = document.getElementById('excelInput2').files[0];
                    const reader = new FileReader();

                    reader.onload = function (event) {
                        const data = event.target.result;
                        const workbook = XLSX.read(data, { type: 'binary' });

                        const firstSheet = workbook.SheetNames[0];
                        const worksheet = workbook.Sheets[firstSheet];

                        // Convert the sheet to JSON
                        const sheetData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

                        // Checking if there is data in the sheet
                        if (sheetData.length > 0) {
                            window.excelData = sheetData.reduce((obj, row) => {
                                // Assuming the first column has IDs and the second has values
                                if (row.length >= 2) {
                                    const id = row[0];
                                    const value = row[1];
                                    obj[id] = value;
                                }
                                return obj;
                            }, {});
                        } else {
                            console.error("Excel file is empty or format is not correct.");
                        }
                    };

                    reader.onerror = function (event) {
                        console.error("Error reading Excel file", event);
                    };

                    reader.readAsBinaryString(excelFile);
                }

                function updateAllIframesWithNewData2() {
                    const allIframes = document.querySelectorAll('iframe.editor');

                    allIframes.forEach(iframe => {
                        // Check if the iframe content is frozen
                        if (iframe.getAttribute('data-frozen') === 'true') {
                            console.log("Skipped frozen iframe:", iframe);
                            return; // Skip this iframe and continue with the next one
                        }

                        // Access iframe's document
                        const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;

                        // Ensure excelData exists or check sessionStorage
                        if (window.excelData || sessionStorage.length > 0) {
                            const keysToCheck = window.excelData ? Object.keys(window.excelData) : [];

                            // Combine excelData keys and sessionStorage keys
                            const allKeys = new Set([
                                ...keysToCheck,
                                ...Object.keys(sessionStorage)
                            ]);

                            allKeys.forEach(key => {
                                const elements = iframeDoc.querySelectorAll('.data-element[data-key="' + key + '"]');

                                if (elements.length === 0) {
                                    console.warn(`No matching elements found for key: ${key}`);
                                }

                                elements.forEach(elem => {
                                    // Check excelData first, fallback to sessionStorage
                                    const value = window.excelData?.[key] || sessionStorage.getItem(key);

                                    if (value) {
                                        if (elem.childNodes.length === 1 && elem.childNodes[0].nodeType === Node.TEXT_NODE) {
                                            // Replace the entire content for single text nodes
                                            elem.textContent = value;
                                        } else {
                                            // Replace placeholders in complex structures
                                            elem.childNodes.forEach(child => {
                                                if (child.nodeType === Node.TEXT_NODE && child.nodeValue.trim().includes('$')) {
                                                    child.nodeValue = child.nodeValue.replace(/\$.*?\$/g, match => {
                                                        const placeholderKey = match.slice(1, -1);
                                                        return (
                                                            window.excelData?.[placeholderKey] ||
                                                            sessionStorage.getItem(placeholderKey) ||
                                                            match // Retain placeholder if no match
                                                        );
                                                    });
                                                }
                                            });
                                        }
                                    }
                                });
                            });
                        } else {
                            console.warn("No data found in excelData or sessionStorage to update iframes.");
                        }
                    });
                }






                function PredefinedDefaults() {
                    const dropdown = document.getElementById('PredefinedDefaultsDropdown');
                    if (!dropdown) {
                        console.error('Dropdown element not found!');
                        return;
                    }

                    dropdown.innerHTML = ''; // Clear any existing options

                    predefinedDefaults.forEach(item => {
                        const option = document.createElement('option');
                        option.value = item.value; // Use the value from the data
                        option.textContent = `${item.label} - ${item.value}`; // Display text as 'Label - Value'
                        dropdown.appendChild(option);
                    });

                    console.log('Dropdown populated:', dropdown.innerHTML); // Debugging output
                }

                // Call PredefinedDefaults when the page loads
                document.addEventListener('DOMContentLoaded', PredefinedDefaults);

                function insertTextFromPredefinedDefaultsDropdown() {
                    const dropdown = document.getElementById('PredefinedDefaultsDropdown');
                    const selectedText = dropdown.options[dropdown.selectedIndex].value;

                    // Get the active iframe and its selection
                    const activeIframe = document.querySelector('iframe.active');
                    if (!activeIframe) return; // Exit if no active iframe is found

                    // Check if the iframe is frozen
                    if (activeIframe.getAttribute('data-frozen') === 'true') {
                        alert("This content is frozen and cannot be edited.");
                        return;
                    }

                    const iframeSelection = activeIframe.contentWindow.getSelection();

                    if (!iframeSelection.rangeCount) return; // No active selection in the iframe.

                    const range = iframeSelection.getRangeAt(0);
                    range.deleteContents();

                    const textNode = document.createTextNode(selectedText);
                    range.insertNode(textNode);

                    // Move the cursor after the inserted text.
                    range.setStartAfter(textNode);
                    range.setEndAfter(textNode);
                    iframeSelection.removeAllRanges();
                    iframeSelection.addRange(range);
                }

                function updateToDoList(iframe) {
                    const containers = document.querySelectorAll('#toDoListContainer');

                    if (containers.length === 0) {
                        console.error('To-Do List containers not found!');
                        return;
                    }

                    const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
                    const acknowledgeItems = iframeDoc.querySelectorAll('button[onclick^="acknowledgeReview"]');

                    acknowledgeItems.forEach((button) => {
                        const highlightId = button.getAttribute('onclick').match(/'(.+?)'/)[1];
                        const documentName = iframe.getAttribute('data-filename') || 'Unknown Document';
                        const highlightText = iframeDoc.querySelector(`[data-highlight-id="${highlightId}"]`)?.textContent || '[No Text]';

                        containers.forEach((container) => {
                            if (container.querySelector(`[data-highlight-id="${highlightId}"]`)) return;

                            const listItem = document.createElement('div');
                            listItem.style.marginBottom = '10px';

                            const label = document.createElement('span');
                            label.textContent = `${documentName}: ${highlightText}`;
                            label.setAttribute('data-highlight-id', highlightId);
                            listItem.appendChild(label);

                            const goToButton = document.createElement('button');
                            goToButton.textContent = 'Go To';
                            goToButton.style.marginLeft = '10px';
                            goToButton.onclick = () => navigateToItem(iframe, highlightId);
                            listItem.appendChild(goToButton);

                            container.appendChild(listItem);
                        });
                    });
                }


                function attachButtonListeners(iframe) {
                    const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
                    const buttons = iframeDoc.querySelectorAll('button[onclick^="acknowledgeReview"]');

                    buttons.forEach((button) => {
                        if (!button.hasAttribute('data-listener-attached')) {
                            button.addEventListener('click', function () {
                                const highlightId = button.getAttribute('onclick').match(/'(.+?)'/)[1];
                                updateToDoListAfterAcknowledgement(highlightId);
                            });
                            button.setAttribute('data-listener-attached', 'true');
                        }
                    });
                }


                function updateToDoListAfterAcknowledgement(highlightId) {
                    const containers = document.querySelectorAll('#toDoListContainer');

                    containers.forEach((container) => {
                        // Find the span or label containing the highlight ID
                        const label = container.querySelector(`[data-highlight-id="${highlightId}"]`);

                        if (label) {
                            // Remove the closest parent <div>, which contains the label and "Go To" button
                            const listItem = label.closest('div');
                            if (listItem) {
                                listItem.remove(); // Remove the entire list item including the button
                            } else {
                                console.warn(`Parent list item for highlight ID ${highlightId} not found.`);
                            }
                        } else {
                            console.warn(`Item with highlight ID ${highlightId} not found in container.`);
                        }
                    });
                }


                function removeToDoItemsForIframe(iframe) {
                    const containers = document.querySelectorAll('#toDoListContainer');
                    const documentName = iframe.getAttribute('data-filename') || 'Unknown Document';

                    containers.forEach((container) => {
                        const toDoItems = container.querySelectorAll('div');
                        toDoItems.forEach((item) => {
                            if (item.textContent.includes(documentName)) {
                                item.remove();
                            }
                        });
                    });
                }



                // Function to navigate to a specific "Acknowledge and Review" item

                function navigateToItem(iframe, highlightId) {
                    const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;

                    const targetElement = iframeDoc.querySelector(`[data-highlight-id="${highlightId}"]`);
                    const targetButton = iframeDoc.querySelector(`button[onclick*="'${highlightId}'"]`);

                    if (!targetElement || !targetButton) {
                        console.error(`Highlight ID ${highlightId} or its button not found in iframe.`);
                        return;
                    }

                    const filename = iframe.getAttribute('data-filename');
                    const tab = document.querySelector(`.tab-header[data-filename="${filename}"]`);

                    if (tab) {
                        tab.click();
                    }

                    targetElement.scrollIntoView({ behavior: 'smooth', block: 'center' });

                    targetElement.style.transition = 'background-color 0.3s ease';
                    targetElement.style.backgroundColor = 'orange';
                    setTimeout(() => {
                        targetElement.style.backgroundColor = 'yellow';
                    }, 1000);

                    targetButton.style.transition = 'background-color 0.3s ease';
                    targetButton.style.backgroundColor = 'orange';
                    setTimeout(() => {
                        targetButton.style.backgroundColor = '';
                    }, 1000);

                    const range = iframeDoc.createRange();
                    const selection = iframe.contentWindow.getSelection();
                    range.setStart(targetElement, 0);
                    range.collapse(true);
                    selection.removeAllRanges();
                    selection.addRange(range);
                }






                // Attach the `load` event listener to dynamically detect when an iframe is ready

                document.addEventListener('DOMContentLoaded', function () {
                    const mainContainer = document.getElementById('toDoListContainer');
                    const hoverContainer = document.querySelector('.hover-content #toDoListContainer');

                    if (!mainContainer) {
                        const toDoContainer = document.createElement('div');
                        toDoContainer.id = 'toDoListContainer';
                        toDoContainer.style.border = '1px solid #ccc';
                        toDoContainer.style.padding = '10px';
                        toDoContainer.style.margin = '10px';
                        toDoContainer.style.backgroundColor = '#f9f9f9';
                        toDoContainer.innerHTML = '<h3>To-Do List</h3>';
                        document.body.appendChild(toDoContainer);
                    }

                    if (!hoverContainer) {
                        console.error('Hover To-Do List container not found!');
                    }

                    const observer = new MutationObserver((mutations) => {
                        mutations.forEach((mutation) => {
                            mutation.addedNodes.forEach((node) => {
                                if (node.tagName === 'IFRAME') {
                                    node.addEventListener('load', () => {
                                        updateToDoList(node);
                                        attachButtonListeners(node);
                                    });
                                }
                            });

                            mutation.removedNodes.forEach((node) => {
                                if (node.tagName === 'IFRAME') {
                                    removeToDoItemsForIframe(node);
                                }
                            });
                        });
                    });

                    observer.observe(document.body, { childList: true, subtree: true });
                });

                document.addEventListener('DOMContentLoaded', function () {
                    const toDoListButton = document.getElementById('toDoListButton');
                    const toDoListContainers = document.querySelectorAll('#toDoListContainer');

                    // Function to update button styling
                    function updateButtonStyle() {
                        let hasItems = false;

                        // Check all containers for child elements
                        toDoListContainers.forEach((container) => {
                            if (container.children.length > 0) {
                                hasItems = true;
                            }
                        });

                        if (hasItems) {
                            // Pulse effect when items are present
                            toDoListButton.classList.add('pulse');
                            toDoListButton.style.backgroundColor = 'lightcoral'; // Light red
                        } else {
                            // Reset styling when no items
                            toDoListButton.classList.remove('pulse');
                            toDoListButton.style.backgroundColor = 'white';
                        }
                    }

                    // Observe changes in the To-Do List containers
                    toDoListContainers.forEach((container) => {
                        const observer = new MutationObserver(updateButtonStyle);

                        observer.observe(container, {
                            childList: true, // Monitor changes to children
                            subtree: true, // Monitor nested elements
                        });
                    });

                    // Initial check for items
                    updateButtonStyle();
                });







                window.addEventListener('load', function () {
                    var star = document.getElementById('goldenStar');
                    star.classList.add('animate-star');

                    // Remove the star after the animation completes (3 seconds)
                    setTimeout(function () {
                        star.remove();
                    }, 3000);
                });



    </script>

</body>

@code {

}
